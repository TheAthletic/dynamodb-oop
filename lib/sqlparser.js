/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var sqlparser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,26],$V1=[1,21],$V2=[1,20],$V3=[1,24],$V4=[1,23],$V5=[1,17],$V6=[1,19],$V7=[1,28],$V8=[1,27],$V9=[1,22],$Va=[1,18],$Vb=[5,6],$Vc=[5,6,45,320],$Vd=[1,37],$Ve=[1,38],$Vf=[5,6,45],$Vg=[1,60],$Vh=[1,61],$Vi=[1,62],$Vj=[1,58],$Vk=[1,57],$Vl=[1,59],$Vm=[1,51],$Vn=[21,22,673],$Vo=[1,68],$Vp=[5,6,29,45,50,58,59,67,71,92,177,245,263,319,320,377,384,501,536,593,601,614,638,650,656,658,681,685,707,708,709,710],$Vq=[1,678],$Vr=[1,680],$Vs=[1,679],$Vt=[1,681],$Vu=[1,682],$Vv=[5,6,45,67,177,263,320,347,614,638,647,658,672,673,674],$Vw=[1,684],$Vx=[5,6,45,67,177,263,320,347,614,637,638,647,658,672,673,674],$Vy=[1,689],$Vz=[245,638],$VA=[614,638],$VB=[5,6,45,67,177,263,320,347,614,638,647,658,672],$VC=[5,6,45,263,320],$VD=[1,756],$VE=[1,769],$VF=[1,770],$VG=[1,774],$VH=[1,771],$VI=[1,773],$VJ=[1,772],$VK=[5,6,638],$VL=[5,6,614,637,638,647],$VM=[638,647],$VN=[2,684],$VO=[1,803],$VP=[1,804],$VQ=[637,638],$VR=[2,646],$VS=[1,813],$VT=[1,814],$VU=[1,815],$VV=[5,6,45,177,320],$VW=[1,847],$VX=[1,848],$VY=[1,849],$VZ=[1,845],$V_=[1,846],$V$=[1,841],$V01=[5,6,45,67,177,263,320,637,638],$V11=[5,6,67],$V21=[1,877],$V31=[5,6,45,177,263,320],$V41=[1,890],$V51=[1,881],$V61=[1,888],$V71=[1,889],$V81=[1,883],$V91=[1,884],$Va1=[1,885],$Vb1=[1,886],$Vc1=[1,887],$Vd1=[5,6,45,50,67,92,319,320,384,681,707,708,709,710],$Ve1=[5,6,45,50,67,92,177,319,320,384,681,707,708,709,710],$Vf1=[1,903],$Vg1=[1,915],$Vh1=[1,906],$Vi1=[1,913],$Vj1=[1,914],$Vk1=[1,908],$Vl1=[1,909],$Vm1=[1,910],$Vn1=[1,911],$Vo1=[1,912],$Vp1=[638,658],$Vq1=[5,6,45,67,177,263,320],$Vr1=[2,846],$Vs1=[1,991],$Vt1=[5,6,614,638],$Vu1=[2,848],$Vv1=[1,1008],$Vw1=[557,638,658];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"sql_stmt_list":4,"EOF":5,"SEMICOLON":6,"sql_stmt":7,"select_stmt":8,"insert_stmt":9,"update_stmt":10,"replace_stmt":11,"delete_stmt":12,"create_table_stmt":13,"show_tables_stmt":14,"drop_table_stmt":15,"describe_table_stmt":16,"drop_index_stmt":17,"scan_stmt":18,"debug_stmt":19,"name":20,"LITERAL":21,"BRALITERAL":22,"database_table_name":23,"DOT":24,"dynamodb_table_name":25,"database_index_name":26,"dynamodb_index_name":27,"signed_number":28,"NUMBER":29,"string_literal":30,"SINGLE_QUOTED_STRING":31,"DOUBLE_QUOTED_STRING":32,"XSTRING":33,"literal_value":34,"boolean":35,"TRUE":36,"FALSE":37,"boolean_value":38,"SQLKEYWORD":39,"JSON":40,"MATH":41,"ABORT":42,"ADD":43,"AFTER":44,"CONSISTENT_READ":45,"CURRENT_DATE":46,"CURRENT_TIME":47,"CURRENT_TIMESTAMP":48,"ISNULL":49,"CONTAINS":50,"NOTNULL":51,"UNDEFINED":52,"PRAGMA":53,"TABLES":54,"STRINGSET":55,"NUMBERSET":56,"BINARYSET":57,"GSI":58,"LSI":59,"ALL":60,"KEYS_ONLY":61,"DEBUG":62,"DYNAMODBKEYWORD":63,"ALLOCATE":64,"ALTER":65,"ANALYZE":66,"AND":67,"ANY":68,"ARE":69,"ARRAY":70,"AS":71,"ASC":72,"ASCII":73,"ASENSITIVE":74,"ASSERTION":75,"ASYMMETRIC":76,"AT":77,"ATOMIC":78,"ATTACH":79,"ATTRIBUTE":80,"AUTH":81,"AUTHORIZATION":82,"AUTHORIZE":83,"AUTO":84,"AVG":85,"BACK":86,"BACKUP":87,"BASE":88,"BATCH":89,"BEFORE":90,"BEGIN":91,"BETWEEN":92,"BIGINT":93,"BINARY":94,"BIT":95,"BLOB":96,"BLOCK":97,"BOOLEAN":98,"BOTH":99,"BREADTH":100,"BUCKET":101,"BULK":102,"BY":103,"BYTE":104,"CALL":105,"CALLED":106,"CALLING":107,"CAPACITY":108,"CASCADE":109,"CASCADED":110,"CASE":111,"CAST":112,"CATALOG":113,"CHAR":114,"CHARACTER":115,"CHECK":116,"CLASS":117,"CLOB":118,"CLOSE":119,"CLUSTER":120,"CLUSTERED":121,"CLUSTERING":122,"CLUSTERS":123,"COALESCE":124,"COLLATE":125,"COLLATION":126,"COLLECTION":127,"COLUMN":128,"COLUMNS":129,"COMBINE":130,"COMMENT":131,"COMMIT":132,"COMPACT":133,"COMPILE":134,"COMPRESS":135,"CONDITION":136,"CONFLICT":137,"CONNECT":138,"CONNECTION":139,"CONSISTENCY":140,"CONSISTENT":141,"CONSTRAINT":142,"CONSTRAINTS":143,"CONSTRUCTOR":144,"CONSUMED":145,"CONTINUE":146,"CONVERT":147,"COPY":148,"CORRESPONDING":149,"COUNT":150,"COUNTER":151,"CREATE":152,"CROSS":153,"CUBE":154,"CURRENT":155,"CURSOR":156,"CYCLE":157,"DATA":158,"DATABASE":159,"DATE":160,"DATETIME":161,"DAY":162,"DEALLOCATE":163,"DEC":164,"DECIMAL":165,"DECLARE":166,"DEFAULT":167,"DEFERRABLE":168,"DEFERRED":169,"DEFINE":170,"DEFINED":171,"DEFINITION":172,"DELETE":173,"DELIMITED":174,"DEPTH":175,"DEREF":176,"DESC":177,"DESCRIBE":178,"DESCRIPTOR":179,"DETACH":180,"DETERMINISTIC":181,"DIAGNOSTICS":182,"DIRECTORIES":183,"DISABLE":184,"DISCONNECT":185,"DISTINCT":186,"DISTRIBUTE":187,"DO":188,"DOMAIN":189,"DOUBLE":190,"DROP":191,"DUMP":192,"DURATION":193,"DYNAMIC":194,"EACH":195,"ELEMENT":196,"ELSE":197,"ELSEIF":198,"EMPTY":199,"ENABLE":200,"END":201,"EQUAL":202,"EQUALS":203,"ERROR":204,"ESCAPE":205,"ESCAPED":206,"EVAL":207,"EVALUATE":208,"EXCEEDED":209,"EXCEPT":210,"EXCEPTION":211,"EXCEPTIONS":212,"EXCLUSIVE":213,"EXEC":214,"EXECUTE":215,"EXISTS":216,"EXIT":217,"EXPLAIN":218,"EXPLODE":219,"EXPORT":220,"EXPRESSION":221,"EXTENDED":222,"EXTERNAL":223,"EXTRACT":224,"FAIL":225,"FAMILY":226,"FETCH":227,"FIELDS":228,"FILE":229,"FILTER":230,"FILTERING":231,"FINAL":232,"FINISH":233,"FIRST":234,"FIXED":235,"FLATTERN":236,"FLOAT":237,"FOR":238,"FORCE":239,"FOREIGN":240,"FORMAT":241,"FORWARD":242,"FOUND":243,"FREE":244,"FROM":245,"FULL":246,"FUNCTION":247,"FUNCTIONS":248,"GENERAL":249,"GENERATE":250,"GET":251,"GLOB":252,"GLOBAL":253,"GO":254,"GOTO":255,"GRANT":256,"GREATER":257,"GROUP":258,"GROUPING":259,"HANDLER":260,"HASH":261,"HAVE":262,"HAVING":263,"HEAP":264,"HIDDEN":265,"HOLD":266,"HOUR":267,"IDENTIFIED":268,"IDENTITY":269,"IF":270,"IGNORE":271,"IMMEDIATE":272,"IMPORT":273,"IN":274,"INCLUDING":275,"INCLUSIVE":276,"INCREMENT":277,"INCREMENTAL":278,"INDEX":279,"INDEXED":280,"INDEXES":281,"INDICATOR":282,"INFINITE":283,"INITIALLY":284,"INLINE":285,"INNER":286,"INNTER":287,"INOUT":288,"INPUT":289,"INSENSITIVE":290,"INSERT":291,"INSTEAD":292,"INT":293,"INTEGER":294,"INTERSECT":295,"INTERVAL":296,"INTO":297,"INVALIDATE":298,"IS":299,"ISOLATION":300,"ITEM":301,"ITEMS":302,"ITERATE":303,"JOIN":304,"KEY":305,"KEYS":306,"LAG":307,"LANGUAGE":308,"LARGE":309,"LAST":310,"LATERAL":311,"LEAD":312,"LEADING":313,"LEAVE":314,"LEFT":315,"LENGTH":316,"LESS":317,"LEVEL":318,"LIKE":319,"LIMIT":320,"LIMITED":321,"LINES":322,"LIST":323,"LOAD":324,"LOCAL":325,"LOCALTIME":326,"LOCALTIMESTAMP":327,"LOCATION":328,"LOCATOR":329,"LOCK":330,"LOCKS":331,"LOG":332,"LOGED":333,"LONG":334,"LOOP":335,"LOWER":336,"MAP":337,"MATCH":338,"MATERIALIZED":339,"MAX":340,"MAXLEN":341,"MEMBER":342,"MERGE":343,"METHOD":344,"METRICS":345,"MIN":346,"MINUS":347,"MINUTE":348,"MISSING":349,"MOD":350,"MODE":351,"MODIFIES":352,"MODIFY":353,"MODULE":354,"MONTH":355,"MULTI":356,"MULTISET":357,"NAME":358,"NAMES":359,"NATIONAL":360,"NATURAL":361,"NCHAR":362,"NCLOB":363,"NEW":364,"NEXT":365,"NO":366,"NONE":367,"NOT":368,"NULL":369,"NULLIF":370,"NUMERIC":371,"OBJECT":372,"OF":373,"OFFLINE":374,"OFFSET":375,"OLD":376,"ON":377,"ONLINE":378,"ONLY":379,"OPAQUE":380,"OPEN":381,"OPERATOR":382,"OPTION":383,"OR":384,"ORDER":385,"ORDINALITY":386,"OTHER":387,"OTHERS":388,"OUT":389,"OUTER":390,"OUTPUT":391,"OVER":392,"OVERLAPS":393,"OVERRIDE":394,"OWNER":395,"PAD":396,"PARALLEL":397,"PARAMETER":398,"PARAMETERS":399,"PARTIAL":400,"PARTITION":401,"PARTITIONED":402,"PARTITIONS":403,"PATH":404,"PERCENT":405,"PERCENTILE":406,"PERMISSION":407,"PERMISSIONS":408,"PIPE":409,"PIPELINED":410,"PLAN":411,"POOL":412,"POSITION":413,"PRECISION":414,"PREPARE":415,"PRESERVE":416,"PRIMARY":417,"PRIOR":418,"PRIVATE":419,"PRIVILEGES":420,"PROCEDURE":421,"PROCESSED":422,"PROJECT":423,"PROJECTION":424,"PROPERTY":425,"PROVISIONING":426,"PUBLIC":427,"PUT":428,"QUERY":429,"QUIT":430,"QUORUM":431,"RAISE":432,"RANDOM":433,"RANGE":434,"RANK":435,"RAW":436,"READ":437,"READS":438,"REAL":439,"REBUILD":440,"RECORD":441,"RECURSIVE":442,"REDUCE":443,"REF":444,"REFERENCE":445,"REFERENCES":446,"REFERENCING":447,"REGEXP":448,"REGION":449,"REINDEX":450,"RELATIVE":451,"RELEASE":452,"REMAINDER":453,"RENAME":454,"REPEAT":455,"REPLACE":456,"REQUEST":457,"RESET":458,"RESIGNAL":459,"RESOURCE":460,"RESPONSE":461,"RESTORE":462,"RESTRICT":463,"RESULT":464,"RETURN":465,"RETURNING":466,"RETURNS":467,"REVERSE":468,"REVOKE":469,"RIGHT":470,"ROLE":471,"ROLES":472,"ROLLBACK":473,"ROLLUP":474,"ROUTINE":475,"ROW":476,"ROWS":477,"RULE":478,"RULES":479,"SAMPLE":480,"SATISFIES":481,"SAVE":482,"SAVEPOINT":483,"SCAN":484,"SCHEMA":485,"SCOPE":486,"SCROLL":487,"SEARCH":488,"SECOND":489,"SECTION":490,"SEGMENT":491,"SEGMENTS":492,"SELECT":493,"SELF":494,"SEMI":495,"SENSITIVE":496,"SEPARATE":497,"SEQUENCE":498,"SERIALIZABLE":499,"SESSION":500,"SET":501,"SETS":502,"SHARD":503,"SHARE":504,"SHARED":505,"SHORT":506,"SHOW":507,"SIGNAL":508,"SIMILAR":509,"SIZE":510,"SKEWED":511,"SMALLINT":512,"SNAPSHOT":513,"SOME":514,"SOURCE":515,"SPACE":516,"SPACES":517,"SPARSE":518,"SPECIFIC":519,"SPECIFICTYPE":520,"SPLIT":521,"SQL":522,"SQLCODE":523,"SQLERROR":524,"SQLEXCEPTION":525,"SQLSTATE":526,"SQLWARNING":527,"START":528,"STATE":529,"STATIC":530,"STATUS":531,"STORAGE":532,"STORE":533,"STORED":534,"STREAM":535,"STRING":536,"STRUCT":537,"STYLE":538,"SUB":539,"SUBMULTISET":540,"SUBPARTITION":541,"SUBSTRING":542,"SUBTYPE":543,"SUM":544,"SUPER":545,"SYMMETRIC":546,"SYNONYM":547,"SYSTEM":548,"TABLE":549,"TABLESAMPLE":550,"TEMP":551,"TEMPORARY":552,"TERMINATED":553,"TEXT":554,"THAN":555,"THEN":556,"THROUGHPUT":557,"TIME":558,"TIMESTAMP":559,"TIMEZONE":560,"TINYINT":561,"TO":562,"TOKEN":563,"TOTAL":564,"TOUCH":565,"TRAILING":566,"TRANSACTION":567,"TRANSFORM":568,"TRANSLATE":569,"TRANSLATION":570,"TREAT":571,"TRIGGER":572,"TRIM":573,"TRUNCATE":574,"TTL":575,"TUPLE":576,"TYPE":577,"UNDER":578,"UNDO":579,"UNION":580,"UNIQUE":581,"UNIT":582,"UNKNOWN":583,"UNLOGGED":584,"UNNEST":585,"UNPROCESSED":586,"UNSIGNED":587,"UNTIL":588,"UPDATE":589,"UPPER":590,"URL":591,"USAGE":592,"USE":593,"USER":594,"USERS":595,"USING":596,"UUID":597,"VACUUM":598,"VALUE":599,"VALUED":600,"VALUES":601,"VARCHAR":602,"VARIABLE":603,"VARIANCE":604,"VARINT":605,"VARYING":606,"VIEW":607,"VIEWS":608,"VIRTUAL":609,"VOID":610,"WAIT":611,"WHEN":612,"WHENEVER":613,"WHERE":614,"WHILE":615,"WINDOW":616,"WITH":617,"WITHIN":618,"WITHOUT":619,"WORK":620,"WRAPPED":621,"WRITE":622,"YEAR":623,"ZONE":624,"dynamodb_data_string":625,"dynamodb_raw_string":626,"dynamodb_data_number":627,"dynamodb_raw_number":628,"dynamodb_data_boolean":629,"dynamodb_raw_boolean":630,"dynamodb_data_null":631,"dynamodb_raw_null":632,"dynamodb_data_undefined":633,"dynamodb_data_array":634,"ARRAYLPAR":635,"array_list":636,"ARRAYRPAR":637,"COMMA":638,"array_value":639,"dynamodb_data_json":640,"dynamodb_raw_array":641,"array_list_raw":642,"array_value_raw":643,"dynamodb_raw_json":644,"JSONLPAR":645,"dynamodb_data_json_list":646,"JSONRPAR":647,"dynamodb_data_json_kv":648,"dynamodb_data_json_kv_key":649,"COLON":650,"dynamodb_data_json_list_raw":651,"dynamodb_raw_json_kv":652,"dynamodb_raw_json_kv_key":653,"javascript_raw_expr":654,"dynamodb_raw_stringset":655,"LPAR":656,"stringset_list":657,"RPAR":658,"dynamodb_raw_numberset":659,"numberset_list":660,"javascript_data_obj_date":661,"javascript_raw_date_parameter":662,"javascript_raw_obj_date":663,"def_resolvable_expr":664,"javascript_raw_obj_math":665,"javascript_data_obj_math":666,"javascript_raw_math_funcname":667,"javascript_raw_math_parameter":668,"javascript_data_func_uuid":669,"javascript_data_expr":670,"dev_resolvable_value":671,"PLUS":672,"STAR":673,"SLASH":674,"KEYWORD":675,"def_insert_ignore":676,"def_insert_columns":677,"def_insert_items":678,"def_insert_item":679,"def_insert_onecolumn":680,"EQ":681,"def_update_columns":682,"def_update_where":683,"def_update_onecolumn":684,"PLUSEQ":685,"def_update_where_cond":686,"def_replace_columns":687,"def_replace_onecolumn":688,"def_delete_where":689,"def_delete_where_cond":690,"def_select":691,"select_sort_clause":692,"limit_clause":693,"def_consistent_read":694,"distinct_all":695,"def_select_columns":696,"def_select_onecolumn":697,"def_select_from":698,"def_select_use_index":699,"def_where":700,"select_where_hash":701,"select_where_range":702,"def_having":703,"having_expr":704,"where_expr":705,"bind_parameter":706,"GT":707,"GE":708,"LT":709,"LE":710,"where_between":711,"select_where_hash_value":712,"select_where_range_value":713,"select_where_between":714,"def_ct_typedef_list":715,"def_ct_pk":716,"def_ct_indexes":717,"def_ct_index_list":718,"def_ct_index":719,"def_ct_projection":720,"def_ct_throughput":721,"def_ct_projection_list":722,"def_ct_typedef":723,"dynamodb_table_name_or_keyword":724,"name_or_keyword":725,"def_scan":726,"def_scan_limit_clause":727,"def_scan_consistent_read":728,"def_scan_columns":729,"def_scan_use_index":730,"def_scan_having":731,"def_scan_onecolumn":732,"def_scan_having_expr":733,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SEMICOLON",21:"LITERAL",22:"BRALITERAL",24:"DOT",29:"NUMBER",31:"SINGLE_QUOTED_STRING",32:"DOUBLE_QUOTED_STRING",33:"XSTRING",36:"TRUE",37:"FALSE",40:"JSON",41:"MATH",42:"ABORT",43:"ADD",44:"AFTER",45:"CONSISTENT_READ",46:"CURRENT_DATE",47:"CURRENT_TIME",48:"CURRENT_TIMESTAMP",49:"ISNULL",50:"CONTAINS",51:"NOTNULL",52:"UNDEFINED",53:"PRAGMA",54:"TABLES",55:"STRINGSET",56:"NUMBERSET",57:"BINARYSET",58:"GSI",59:"LSI",60:"ALL",61:"KEYS_ONLY",62:"DEBUG",64:"ALLOCATE",65:"ALTER",66:"ANALYZE",67:"AND",68:"ANY",69:"ARE",70:"ARRAY",71:"AS",72:"ASC",73:"ASCII",74:"ASENSITIVE",75:"ASSERTION",76:"ASYMMETRIC",77:"AT",78:"ATOMIC",79:"ATTACH",80:"ATTRIBUTE",81:"AUTH",82:"AUTHORIZATION",83:"AUTHORIZE",84:"AUTO",85:"AVG",86:"BACK",87:"BACKUP",88:"BASE",89:"BATCH",90:"BEFORE",91:"BEGIN",92:"BETWEEN",93:"BIGINT",94:"BINARY",95:"BIT",96:"BLOB",97:"BLOCK",98:"BOOLEAN",99:"BOTH",100:"BREADTH",101:"BUCKET",102:"BULK",103:"BY",104:"BYTE",105:"CALL",106:"CALLED",107:"CALLING",108:"CAPACITY",109:"CASCADE",110:"CASCADED",111:"CASE",112:"CAST",113:"CATALOG",114:"CHAR",115:"CHARACTER",116:"CHECK",117:"CLASS",118:"CLOB",119:"CLOSE",120:"CLUSTER",121:"CLUSTERED",122:"CLUSTERING",123:"CLUSTERS",124:"COALESCE",125:"COLLATE",126:"COLLATION",127:"COLLECTION",128:"COLUMN",129:"COLUMNS",130:"COMBINE",131:"COMMENT",132:"COMMIT",133:"COMPACT",134:"COMPILE",135:"COMPRESS",136:"CONDITION",137:"CONFLICT",138:"CONNECT",139:"CONNECTION",140:"CONSISTENCY",141:"CONSISTENT",142:"CONSTRAINT",143:"CONSTRAINTS",144:"CONSTRUCTOR",145:"CONSUMED",146:"CONTINUE",147:"CONVERT",148:"COPY",149:"CORRESPONDING",150:"COUNT",151:"COUNTER",152:"CREATE",153:"CROSS",154:"CUBE",155:"CURRENT",156:"CURSOR",157:"CYCLE",158:"DATA",159:"DATABASE",160:"DATE",161:"DATETIME",162:"DAY",163:"DEALLOCATE",164:"DEC",165:"DECIMAL",166:"DECLARE",167:"DEFAULT",168:"DEFERRABLE",169:"DEFERRED",170:"DEFINE",171:"DEFINED",172:"DEFINITION",173:"DELETE",174:"DELIMITED",175:"DEPTH",176:"DEREF",177:"DESC",178:"DESCRIBE",179:"DESCRIPTOR",180:"DETACH",181:"DETERMINISTIC",182:"DIAGNOSTICS",183:"DIRECTORIES",184:"DISABLE",185:"DISCONNECT",186:"DISTINCT",187:"DISTRIBUTE",188:"DO",189:"DOMAIN",190:"DOUBLE",191:"DROP",192:"DUMP",193:"DURATION",194:"DYNAMIC",195:"EACH",196:"ELEMENT",197:"ELSE",198:"ELSEIF",199:"EMPTY",200:"ENABLE",201:"END",202:"EQUAL",203:"EQUALS",204:"ERROR",205:"ESCAPE",206:"ESCAPED",207:"EVAL",208:"EVALUATE",209:"EXCEEDED",210:"EXCEPT",211:"EXCEPTION",212:"EXCEPTIONS",213:"EXCLUSIVE",214:"EXEC",215:"EXECUTE",216:"EXISTS",217:"EXIT",218:"EXPLAIN",219:"EXPLODE",220:"EXPORT",221:"EXPRESSION",222:"EXTENDED",223:"EXTERNAL",224:"EXTRACT",225:"FAIL",226:"FAMILY",227:"FETCH",228:"FIELDS",229:"FILE",230:"FILTER",231:"FILTERING",232:"FINAL",233:"FINISH",234:"FIRST",235:"FIXED",236:"FLATTERN",237:"FLOAT",238:"FOR",239:"FORCE",240:"FOREIGN",241:"FORMAT",242:"FORWARD",243:"FOUND",244:"FREE",245:"FROM",246:"FULL",247:"FUNCTION",248:"FUNCTIONS",249:"GENERAL",250:"GENERATE",251:"GET",252:"GLOB",253:"GLOBAL",254:"GO",255:"GOTO",256:"GRANT",257:"GREATER",258:"GROUP",259:"GROUPING",260:"HANDLER",261:"HASH",262:"HAVE",263:"HAVING",264:"HEAP",265:"HIDDEN",266:"HOLD",267:"HOUR",268:"IDENTIFIED",269:"IDENTITY",270:"IF",271:"IGNORE",272:"IMMEDIATE",273:"IMPORT",274:"IN",275:"INCLUDING",276:"INCLUSIVE",277:"INCREMENT",278:"INCREMENTAL",279:"INDEX",280:"INDEXED",281:"INDEXES",282:"INDICATOR",283:"INFINITE",284:"INITIALLY",285:"INLINE",286:"INNER",287:"INNTER",288:"INOUT",289:"INPUT",290:"INSENSITIVE",291:"INSERT",292:"INSTEAD",293:"INT",294:"INTEGER",295:"INTERSECT",296:"INTERVAL",297:"INTO",298:"INVALIDATE",299:"IS",300:"ISOLATION",301:"ITEM",302:"ITEMS",303:"ITERATE",304:"JOIN",305:"KEY",306:"KEYS",307:"LAG",308:"LANGUAGE",309:"LARGE",310:"LAST",311:"LATERAL",312:"LEAD",313:"LEADING",314:"LEAVE",315:"LEFT",316:"LENGTH",317:"LESS",318:"LEVEL",319:"LIKE",320:"LIMIT",321:"LIMITED",322:"LINES",323:"LIST",324:"LOAD",325:"LOCAL",326:"LOCALTIME",327:"LOCALTIMESTAMP",328:"LOCATION",329:"LOCATOR",330:"LOCK",331:"LOCKS",332:"LOG",333:"LOGED",334:"LONG",335:"LOOP",336:"LOWER",337:"MAP",338:"MATCH",339:"MATERIALIZED",340:"MAX",341:"MAXLEN",342:"MEMBER",343:"MERGE",344:"METHOD",345:"METRICS",346:"MIN",347:"MINUS",348:"MINUTE",349:"MISSING",350:"MOD",351:"MODE",352:"MODIFIES",353:"MODIFY",354:"MODULE",355:"MONTH",356:"MULTI",357:"MULTISET",358:"NAME",359:"NAMES",360:"NATIONAL",361:"NATURAL",362:"NCHAR",363:"NCLOB",364:"NEW",365:"NEXT",366:"NO",367:"NONE",368:"NOT",369:"NULL",370:"NULLIF",371:"NUMERIC",372:"OBJECT",373:"OF",374:"OFFLINE",375:"OFFSET",376:"OLD",377:"ON",378:"ONLINE",379:"ONLY",380:"OPAQUE",381:"OPEN",382:"OPERATOR",383:"OPTION",384:"OR",385:"ORDER",386:"ORDINALITY",387:"OTHER",388:"OTHERS",389:"OUT",390:"OUTER",391:"OUTPUT",392:"OVER",393:"OVERLAPS",394:"OVERRIDE",395:"OWNER",396:"PAD",397:"PARALLEL",398:"PARAMETER",399:"PARAMETERS",400:"PARTIAL",401:"PARTITION",402:"PARTITIONED",403:"PARTITIONS",404:"PATH",405:"PERCENT",406:"PERCENTILE",407:"PERMISSION",408:"PERMISSIONS",409:"PIPE",410:"PIPELINED",411:"PLAN",412:"POOL",413:"POSITION",414:"PRECISION",415:"PREPARE",416:"PRESERVE",417:"PRIMARY",418:"PRIOR",419:"PRIVATE",420:"PRIVILEGES",421:"PROCEDURE",422:"PROCESSED",423:"PROJECT",424:"PROJECTION",425:"PROPERTY",426:"PROVISIONING",427:"PUBLIC",428:"PUT",429:"QUERY",430:"QUIT",431:"QUORUM",432:"RAISE",433:"RANDOM",434:"RANGE",435:"RANK",436:"RAW",437:"READ",438:"READS",439:"REAL",440:"REBUILD",441:"RECORD",442:"RECURSIVE",443:"REDUCE",444:"REF",445:"REFERENCE",446:"REFERENCES",447:"REFERENCING",448:"REGEXP",449:"REGION",450:"REINDEX",451:"RELATIVE",452:"RELEASE",453:"REMAINDER",454:"RENAME",455:"REPEAT",456:"REPLACE",457:"REQUEST",458:"RESET",459:"RESIGNAL",460:"RESOURCE",461:"RESPONSE",462:"RESTORE",463:"RESTRICT",464:"RESULT",465:"RETURN",466:"RETURNING",467:"RETURNS",468:"REVERSE",469:"REVOKE",470:"RIGHT",471:"ROLE",472:"ROLES",473:"ROLLBACK",474:"ROLLUP",475:"ROUTINE",476:"ROW",477:"ROWS",478:"RULE",479:"RULES",480:"SAMPLE",481:"SATISFIES",482:"SAVE",483:"SAVEPOINT",484:"SCAN",485:"SCHEMA",486:"SCOPE",487:"SCROLL",488:"SEARCH",489:"SECOND",490:"SECTION",491:"SEGMENT",492:"SEGMENTS",493:"SELECT",494:"SELF",495:"SEMI",496:"SENSITIVE",497:"SEPARATE",498:"SEQUENCE",499:"SERIALIZABLE",500:"SESSION",501:"SET",502:"SETS",503:"SHARD",504:"SHARE",505:"SHARED",506:"SHORT",507:"SHOW",508:"SIGNAL",509:"SIMILAR",510:"SIZE",511:"SKEWED",512:"SMALLINT",513:"SNAPSHOT",514:"SOME",515:"SOURCE",516:"SPACE",517:"SPACES",518:"SPARSE",519:"SPECIFIC",520:"SPECIFICTYPE",521:"SPLIT",522:"SQL",523:"SQLCODE",524:"SQLERROR",525:"SQLEXCEPTION",526:"SQLSTATE",527:"SQLWARNING",528:"START",529:"STATE",530:"STATIC",531:"STATUS",532:"STORAGE",533:"STORE",534:"STORED",535:"STREAM",536:"STRING",537:"STRUCT",538:"STYLE",539:"SUB",540:"SUBMULTISET",541:"SUBPARTITION",542:"SUBSTRING",543:"SUBTYPE",544:"SUM",545:"SUPER",546:"SYMMETRIC",547:"SYNONYM",548:"SYSTEM",549:"TABLE",550:"TABLESAMPLE",551:"TEMP",552:"TEMPORARY",553:"TERMINATED",554:"TEXT",555:"THAN",556:"THEN",557:"THROUGHPUT",558:"TIME",559:"TIMESTAMP",560:"TIMEZONE",561:"TINYINT",562:"TO",563:"TOKEN",564:"TOTAL",565:"TOUCH",566:"TRAILING",567:"TRANSACTION",568:"TRANSFORM",569:"TRANSLATE",570:"TRANSLATION",571:"TREAT",572:"TRIGGER",573:"TRIM",574:"TRUNCATE",575:"TTL",576:"TUPLE",577:"TYPE",578:"UNDER",579:"UNDO",580:"UNION",581:"UNIQUE",582:"UNIT",583:"UNKNOWN",584:"UNLOGGED",585:"UNNEST",586:"UNPROCESSED",587:"UNSIGNED",588:"UNTIL",589:"UPDATE",590:"UPPER",591:"URL",592:"USAGE",593:"USE",594:"USER",595:"USERS",596:"USING",597:"UUID",598:"VACUUM",599:"VALUE",600:"VALUED",601:"VALUES",602:"VARCHAR",603:"VARIABLE",604:"VARIANCE",605:"VARINT",606:"VARYING",607:"VIEW",608:"VIEWS",609:"VIRTUAL",610:"VOID",611:"WAIT",612:"WHEN",613:"WHENEVER",614:"WHERE",615:"WHILE",616:"WINDOW",617:"WITH",618:"WITHIN",619:"WITHOUT",620:"WORK",621:"WRAPPED",622:"WRITE",623:"YEAR",624:"ZONE",635:"ARRAYLPAR",637:"ARRAYRPAR",638:"COMMA",645:"JSONLPAR",647:"JSONRPAR",650:"COLON",656:"LPAR",658:"RPAR",672:"PLUS",673:"STAR",674:"SLASH",681:"EQ",685:"PLUSEQ",706:"bind_parameter",707:"GT",708:"GE",709:"LT",710:"LE"},
productions_: [0,[3,2],[4,3],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[20,1],[20,1],[23,3],[23,1],[25,1],[26,1],[27,1],[28,1],[30,1],[30,1],[30,1],[34,1],[34,1],[35,1],[35,1],[38,1],[38,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[625,1],[625,1],[626,1],[626,1],[627,1],[628,1],[629,1],[629,1],[630,1],[630,1],[631,1],[632,1],[633,1],[634,3],[636,3],[636,1],[639,0],[639,1],[639,1],[639,1],[639,1],[639,1],[639,1],[641,3],[642,3],[642,1],[643,0],[643,1],[643,1],[643,1],[643,1],[643,1],[643,1],[640,3],[646,3],[646,1],[649,1],[649,1],[649,1],[648,0],[648,3],[648,3],[648,3],[648,3],[648,3],[648,3],[648,3],[648,3],[648,3],[648,3],[648,3],[648,3],[648,3],[648,3],[648,3],[648,3],[648,3],[648,3],[644,3],[651,3],[651,1],[653,1],[653,1],[653,1],[652,0],[652,3],[652,3],[652,3],[652,3],[652,3],[655,7],[657,3],[657,1],[659,7],[660,3],[660,1],[661,5],[661,9],[663,5],[663,9],[662,0],[662,1],[665,1],[666,6],[667,1],[667,1],[668,0],[668,1],[669,3],[669,4],[654,1],[670,1],[664,1],[664,3],[664,3],[664,3],[664,3],[664,3],[671,1],[671,1],[671,1],[671,1],[671,1],[675,1],[675,1],[9,6],[9,6],[676,0],[676,1],[678,3],[678,1],[679,3],[677,3],[677,1],[680,3],[680,3],[680,3],[680,3],[680,3],[680,3],[680,3],[10,6],[682,3],[682,1],[684,3],[684,3],[684,3],[684,3],[684,3],[684,3],[684,3],[684,3],[684,3],[683,1],[683,3],[686,3],[11,5],[687,3],[687,1],[688,3],[688,3],[688,3],[688,3],[688,3],[688,3],[688,3],[12,5],[689,1],[689,3],[690,3],[8,4],[693,0],[693,2],[692,0],[692,1],[694,0],[694,1],[695,0],[695,1],[695,1],[696,3],[696,1],[697,1],[697,1],[697,3],[698,2],[699,0],[699,3],[700,2],[700,4],[703,2],[703,0],[691,7],[705,1],[705,1],[705,1],[705,3],[705,3],[705,3],[705,3],[705,3],[705,3],[705,3],[705,3],[705,3],[701,3],[712,1],[702,3],[702,3],[702,3],[702,3],[702,3],[702,3],[702,3],[713,1],[714,3],[714,3],[711,3],[711,3],[704,1],[704,1],[704,1],[704,1],[704,3],[704,3],[704,3],[704,3],[704,3],[704,3],[704,3],[704,3],[704,3],[704,3],[704,3],[704,3],[13,9],[717,0],[717,2],[718,3],[718,1],[719,7],[719,8],[719,9],[719,10],[716,6],[716,8],[721,0],[721,3],[720,0],[720,2],[720,2],[720,4],[722,3],[722,1],[715,3],[715,1],[723,2],[723,2],[14,2],[15,3],[16,3],[724,1],[725,1],[725,1],[725,1],[17,5],[18,3],[726,6],[727,0],[727,2],[728,0],[728,1],[729,3],[729,1],[732,1],[732,1],[732,3],[730,0],[730,3],[731,2],[731,0],[733,1],[733,1],[733,1],[733,1],[733,3],[733,3],[733,3],[733,3],[733,3],[733,3],[733,3],[733,3],[733,3],[733,3],[733,3],[733,3],[19,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			this.$ = $$[$0-1];
			return this.$;
		
break;
case 2:
 this.$ = $$[$0-2]; if($$[$0]) this.$.push($$[$0]); 
break;
case 3: case 635: case 645: case 655: case 680: case 692: case 730: case 733: case 743: case 758: case 781: case 853: case 873:
 this.$ = [$$[$0]]; 
break;
case 16: case 20: case 22: case 23: case 24: case 25: case 26: case 723: case 724: case 785: case 787: case 793: case 819: case 820: case 861: case 862: case 878: case 881: case 882:
 this.$ = $$[$0]; 
break;
case 17: case 863:
 this.$ = $$[$0].substr(1,$$[$0].length-2); 
break;
case 18:
 this.$ = {database:$$[$0-2], table:$$[$0]}; 
break;
case 19:
 this.$ = {table:$$[$0]}; 
break;
case 21:
 this.$ = {index:$$[$0]}; 
break;
case 27:
 this.$ = {type:'number', number:$$[$0]}; 
break;
case 28:
 this.$ = {type:'string', string: $$[$0]}
break;
case 29: case 626:
 this.$ = true; 
break;
case 30: case 627:
 this.$ = false; 
break;
case 31:
 this.$ = {type:'boolean', value: true }; 
break;
case 32:
 this.$ = {type:'boolean', value: false }; 
break;
case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 123: case 124: case 125: case 126: case 127: case 128: case 129: case 130: case 131: case 132: case 133: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147: case 148: case 149: case 150: case 151: case 152: case 153: case 154: case 155: case 156: case 157: case 158: case 159: case 160: case 161: case 162: case 163: case 164: case 165: case 166: case 167: case 168: case 169: case 170: case 171: case 172: case 173: case 174: case 175: case 176: case 177: case 178: case 179: case 180: case 181: case 182: case 183: case 184: case 185: case 186: case 187: case 188: case 189: case 190: case 191: case 192: case 193: case 194: case 195: case 196: case 197: case 198: case 199: case 200: case 201: case 202: case 203: case 204: case 205: case 206: case 207: case 208: case 209: case 210: case 211: case 212: case 213: case 214: case 215: case 216: case 217: case 218: case 219: case 220: case 221: case 222: case 223: case 224: case 225: case 226: case 227: case 228: case 229: case 230: case 231: case 232: case 233: case 234: case 235: case 236: case 237: case 238: case 239: case 240: case 241: case 242: case 243: case 244: case 245: case 246: case 247: case 248: case 249: case 250: case 251: case 252: case 253: case 254: case 255: case 256: case 257: case 258: case 259: case 260: case 261: case 262: case 263: case 264: case 265: case 266: case 267: case 268: case 269: case 270: case 271: case 272: case 273: case 274: case 275: case 276: case 277: case 278: case 279: case 280: case 281: case 282: case 283: case 284: case 285: case 286: case 287: case 288: case 289: case 290: case 291: case 292: case 293: case 294: case 295: case 296: case 297: case 298: case 299: case 300: case 301: case 302: case 303: case 304: case 305: case 306: case 307: case 308: case 309: case 310: case 311: case 312: case 313: case 314: case 315: case 316: case 317: case 318: case 319: case 320: case 321: case 322: case 323: case 324: case 325: case 326: case 327: case 328: case 329: case 330: case 331: case 332: case 333: case 334: case 335: case 336: case 337: case 338: case 339: case 340: case 341: case 342: case 343: case 344: case 345: case 346: case 347: case 348: case 349: case 350: case 351: case 352: case 353: case 354: case 355: case 356: case 357: case 358: case 359: case 360: case 361: case 362: case 363: case 364: case 365: case 366: case 367: case 368: case 369: case 370: case 371: case 372: case 373: case 374: case 375: case 376: case 377: case 378: case 379: case 380: case 381: case 382: case 383: case 384: case 385: case 386: case 387: case 388: case 389: case 390: case 391: case 392: case 393: case 394: case 395: case 396: case 397: case 398: case 399: case 400: case 401: case 402: case 403: case 404: case 405: case 406: case 407: case 408: case 409: case 410: case 411: case 412: case 413: case 414: case 415: case 416: case 417: case 418: case 419: case 420: case 421: case 422: case 423: case 424: case 425: case 426: case 427: case 428: case 429: case 430: case 431: case 432: case 433: case 434: case 435: case 436: case 437: case 438: case 439: case 440: case 441: case 442: case 443: case 444: case 445: case 446: case 447: case 448: case 449: case 450: case 451: case 452: case 453: case 454: case 455: case 456: case 457: case 458: case 459: case 460: case 461: case 462: case 463: case 464: case 465: case 466: case 467: case 468: case 469: case 470: case 471: case 472: case 473: case 474: case 475: case 476: case 477: case 478: case 479: case 480: case 481: case 482: case 483: case 484: case 485: case 486: case 487: case 488: case 489: case 490: case 491: case 492: case 493: case 494: case 495: case 496: case 497: case 498: case 499: case 500: case 501: case 502: case 503: case 504: case 505: case 506: case 507: case 508: case 509: case 510: case 511: case 512: case 513: case 514: case 515: case 516: case 517: case 518: case 519: case 520: case 521: case 522: case 523: case 524: case 525: case 526: case 527: case 528: case 529: case 530: case 531: case 532: case 533: case 534: case 535: case 536: case 537: case 538: case 539: case 540: case 541: case 542: case 543: case 544: case 545: case 546: case 547: case 548: case 549: case 550: case 551: case 552: case 553: case 554: case 555: case 556: case 557: case 558: case 559: case 560: case 561: case 562: case 563: case 564: case 565: case 566: case 567: case 568: case 569: case 570: case 571: case 572: case 573: case 574: case 575: case 576: case 577: case 578: case 579: case 580: case 581: case 582: case 583: case 584: case 585: case 586: case 587: case 588: case 589: case 590: case 591: case 592: case 593: case 594: case 595: case 596: case 597: case 598: case 599: case 600: case 601: case 602: case 603: case 604: case 605: case 606: case 607: case 608: case 609: case 610: case 611: case 612: case 613: case 614: case 615: case 616: case 617: case 618: case 619:
 this.$ = yytext; 
break;
case 620: case 621: case 624:
 this.$ = eval($$[$0]); 
break;
case 622: case 623:
 this.$ = { 'S': eval($$[$0]).toString() } 
break;
case 625:
 this.$ = { 'N': eval($$[$0]).toString() } 
break;
case 628:
 this.$ = { 'BOOL': true  } 
break;
case 629:
 this.$ = { 'BOOL': false } 
break;
case 630:
 this.$ = null; 
break;
case 631:
 this.$ = { 'NULL': true } 
break;
case 632:
 this.$ = "\0"; 
break;
case 633:

			if ($$[$0-1].slice(-1) == "\0") {
				this.$ = $$[$0-1].slice(0,-1)
			} else
				this.$ = $$[$0-1];
		
break;
case 634: case 644:

			this.$ = $$[$0-2]
			this.$.push($$[$0]);
		
break;
case 636: case 646:
 this.$ = "\0" 
break;
case 637: case 638: case 639: case 640: case 641: case 642: case 647: case 648: case 649: case 650: case 651: case 652: case 656: case 657: case 658: case 681: case 701: case 704: case 707: case 711: case 712: case 718: case 719: case 720: case 721: case 722: case 806: case 814: case 864:
 this.$ = $$[$0] 
break;
case 643:

			if ($$[$0-1].slice(-1) == "\0") {
				$$[$0-1] = $$[$0-1].slice(0,-1)
			}
			this.$ = { 'L': $$[$0-1] }
		
break;
case 653:

			var $kv = {}
			if ($$[$0-1]) {
				$$[$0-1].map(function(v) {
					if (v)
						$kv[v[0]] = v[1]
				})
			}
			this.$ = $kv
		
break;
case 654: case 679: case 729: case 732: case 742: case 757: case 780: case 838: case 852: case 872:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 659: case 684: case 771: case 777: case 786: case 836: case 868: case 877:
 this.$ = undefined; 
break;
case 660: case 661: case 662: case 663: case 664: case 665: case 666: case 667: case 668: case 669: case 670: case 671: case 672: case 673: case 674: case 675: case 676: case 677: case 685: case 686: case 687: case 688: case 689:
 this.$ = [$$[$0-2], $$[$0] ] 
break;
case 678:

			var $kv = {}
			if ($$[$0-1]) {
				$$[$0-1].map(function(v) {
					if (v)
						$kv[v[0]] = v[1]
				})
			}
			this.$ = { 'M': $kv }
		
break;
case 682: case 683:
 this.$ = eval($$[$0]) 
break;
case 690:

			if ($$[$0-2].slice(-1) == "\0") {
				$$[$0-2] = $$[$0-2].slice(0,-1)
			}
			this.$ = { 'SS': $$[$0-2] }
		
break;
case 691:

			this.$ = $$[$0-2] 
			this.$.push($$[$0]); 
		
break;
case 693:

			if ($$[$0-2].slice(-1) == "\0") {
				$$[$0-2] = $$[$0-2].slice(0,-1)
			}
			this.$ = { 'NS': $$[$0-2] }
		
break;
case 694:

			this.$ = $$[$0-2] 
			this.$.push( ($$[$0]).toString() ); 
		
break;
case 695:
 this.$ = [ ($$[$0]).toString() ]; 
break;
case 696:

			var date;
			if ($$[$0-1])
				date = new Date($$[$0-1]);
			else
				date = new Date()

			if (typeof date === "object") {
				this.$ = date.toString()
			}
			if (typeof date === "string") {
				this.$ = date
			}
			if (typeof date === "number") {
				this.$ = date
			}
		
break;
case 697:

			var date;
			if ($$[$0-5])
				date = new Date($$[$0-5]);
			else
				date = new Date()


			if (typeof date[$$[$0-2]] === "function" ) {
				date = date[$$[$0-2]]();
				if (typeof date === "object") {
					this.$ = date.toString()
				}
				if (typeof date === "string") {
					this.$ = date
				}
				if (typeof date === "number") {
					this.$ = date
				}
			} else {
				throw $$[$0-2] + " not a function"
			}
		
break;
case 698:

			var date;
			if ($$[$0-1])
				date = new Date($$[$0-1]);
			else
				date = new Date()

			if (typeof date === "object") {
				this.$ = { S: date.toString() }
			}
			if (typeof date === "string") {
				this.$ = { S: date }
			}
			if (typeof date === "number") {
				this.$ = { N: date.toString() }
			}
		
break;
case 699:

			var date;
			if ($$[$0-5])
				date = new Date($$[$0-5]);
			else
				date = new Date()


			if (typeof date[$$[$0-2]] === "function" ) {
				date = date[$$[$0-2]]();
				if (typeof date === "object") {
					this.$ = { S: date.toString() }
				}
				if (typeof date === "string") {
					this.$ = { S: date }
				}
				if (typeof date === "number") {
					this.$ = { N: date.toString() }
				}
			} else {
				throw $$[$0-2] + " not a function"
			}
		
break;
case 700: case 706:
 this.$ = undefined 
break;
case 702: case 710:

			if (typeof $$[$0] === "object") {
				this.$ = { S: $$[$0].toString() }
			}
			if (typeof $$[$0] === "string") {
				this.$ = { S: $$[$0] }
			}
			if (typeof $$[$0] === "number") {
				this.$ = { N: $$[$0].toString() }
			}
		
break;
case 703:

			if (typeof Math[$$[$0-3]] === "function" ) {
				this.$ = Math[$$[$0-3]]($$[$0-1]);
			} else {
				throw 'Math.' + $$[$0-3] + " not a function"
			}
		
break;
case 705:
 this.$ = 'random' 
break;
case 708:

			this.$ =  '########-####-####-####-############'.replace(/[#]/g, function(c) { var r = Math.random()*16|0, v = c == '#' ? r : (r&0x3|0x8); return v.toString(16); })
 		
break;
case 709:

			this.$ =  '########-####-####-####-############'.replace(/[#]/g, function(c) { var r = Math.random()*16|0, v = c == '#' ? r : (r&0x3|0x8); return v.toString(16); })
			if ( typeof $$[$0-1] === 'string')
				this.$ =  $$[$0-1].replace(/[#]/g, function(c) { var r = Math.random()*16|0, v = c == '#' ? r : (r&0x3|0x8); return v.toString(16); })

			if ( typeof $$[$0-1] === 'number')
				this.$ = '#'.repeat(
					Math.max(
						1,
						Math.min(36, $$[$0-1])
					)
				).replace(/[#]/g, function(c) { var r = Math.random()*16|0, v = c == '#' ? r : (r&0x3|0x8); return v.toString(16); })
		
break;
case 713: case 731:
 this.$ = $$[$0-1] 
break;
case 714:
 this.$ = $$[$0-2] + $$[$0] 
break;
case 715:
 this.$ = $$[$0-2] - $$[$0] 
break;
case 716:
 this.$ = $$[$0-2] * $$[$0] 
break;
case 717:

			if ($$[$0] === 0 )
				throw 'Division by 0';

			this.$ = $$[$0-2] / $$[$0]
		
break;
case 725:

			var $kv = {}
			$$[$0].map(function(v) { $kv[v[0]] = v[1] })

			this.$ = {
				statement: 'INSERT',
				operation: 'putItem',
				ignore: $$[$0-4],
				dynamodb: {
					TableName: $$[$0-2],
					Item: $kv,

				},

			};

		
break;
case 726:

			if ($$[$0].length == 1) {
				this.$ = {
					statement: 'INSERT',
					operation: 'putItem',
					ignore: $$[$0-4],
					dynamodb: {
						TableName: $$[$0-2],
						Item: $$[$0][0].M,
					},

				};
			} else {
				// batch insert
				this.$ = {
					statement: 'BATCHINSERT',
					operation: 'batchWriteItem',
					dynamodb: {
						RequestItems: {}
					}

				}

				var RequestItems = {}

				RequestItems[$$[$0-2]] = []

				$$[$0].map(function(v) {
					RequestItems[$$[$0-2]].push({
						PutRequest: {
							Item: v.M
						}
					})
				})
				this.$.dynamodb.RequestItems = RequestItems;
			}
		
break;
case 727:
 this.$ = false 
break;
case 728:
 this.$ = true 
break;
case 734: case 735: case 736: case 737: case 738: case 739: case 740: case 744: case 745: case 746: case 747: case 748: case 749: case 750: case 759: case 760: case 761: case 762: case 763: case 764: case 765: case 815: case 816:
 this.$ = [ $$[$0-2], $$[$0] ]; 
break;
case 741:


			var Key = {}
			$$[$0].map(function(k) {
				Key[k.k] = k.v
			})
			var Expected = {}
			$$[$0].map(function(k) {
				Expected[k.k] = {
					ComparisonOperator: 'EQ',
					Value: k.v,

				}
			})

			var AttributeUpdates = {}
			$$[$0-2].map(function(k) {
				var Value = k[1]
				var Action = 'PUT' // default

				if (k[2] === '+=')
					Action = 'ADD'

				if (k[2] === 'delete') {
					Action = 'DELETE'

				}

				AttributeUpdates[k[0]] = {
					Action: Action,
					Value: Value,
				}
			})

			this.$ = {
				statement: 'UPDATE',
				operation: 'updateItem',
				dynamodb: {
					TableName: $$[$0-4],
					Key: Key,
					Expected: Expected,
					AttributeUpdates: AttributeUpdates,
				},
			}
		
break;
case 751:
 this.$ = [ $$[$0-2], $$[$0], '+=' ]; 
break;
case 752:
 this.$ = [ $$[$0-2], undefined, 'delete' ]; 
break;
case 753: case 767: case 839: case 855:
 this.$ = [ $$[$0] ]; 
break;
case 754: case 768:
 this.$ = [$$[$0-2], $$[$0]]; 
break;
case 755: case 769:
 this.$ = {k: $$[$0-2], v: $$[$0] }; 
break;
case 756:

			var $kv = {}
			$$[$0].map(function(v) {
				$kv[v[0]] = v[1]
			})
			this.$ = {
				statement: 'REPLACE',
				operation: 'putItem',
				dynamodb: {
					TableName: $$[$0-2],
					Item: $kv
				},
			}
		
break;
case 766:

			var $kv = {}
			$$[$0].map(function(v) { $kv[v.k] = v.v })

			this.$ = {
				statement: 'DELETE',
				operation: 'deleteItem',
				dynamodb: {
					TableName: $$[$0-2],
					Key: $kv,
				}
			}
		
break;
case 770:

			this.$ = {
				statement: 'SELECT',
				operation: 'query',
				dynamodb: $$[$0-3].dynamodb,
			};
			yy.extend(this.$.dynamodb,$$[$0-2]);
			yy.extend(this.$.dynamodb,$$[$0-1]);
			yy.extend(this.$.dynamodb,$$[$0]);
		
break;
case 772:
 this.$ = { Limit: $$[$0] }; 
break;
case 773:
 this.$ = { ScanIndexForward: true }; 
break;
case 774:
 this.$ = { ScanIndexForward: false }; 
break;
case 775: case 870:
 this.$ = { ConsistentRead: false }; 
break;
case 776:
 this.$ = { ConsistentRead: true }; 
break;
case 778:
 this.$ = {distinct:true}; 
break;
case 779:
 this.$ = {all:true}; 
break;
case 782: case 874:
 this.$ = {type: 'star', star:true}; 
break;
case 783: case 875:
 this.$ = {type: 'column', column: $$[$0]}; 
break;
case 784: case 876:
 this.$ = {type: 'column', column: $$[$0-2], alias: $$[$0] }; 
break;
case 788:

			this.$ = {
				//KeyConditionExpression: $$[$0],
				ExpressionAttributeNames: {},
				ExpressionAttributeValues: {},
			};

			this.$.ExpressionAttributeNames[ '#partitionKeyName' ] = $$[$0].partition.partitionKeyName
			this.$.ExpressionAttributeValues[ ':partitionKeyValue' ] = $$[$0].partition.partitionKeyValue
			this.$.KeyConditionExpression = ' #partitionKeyName =  :partitionKeyValue '

		
break;
case 789:

			this.$ = {
				//KeyConditionExpression: $$[$0-2],
				ExpressionAttributeNames: {},
				ExpressionAttributeValues: {},
			};

			this.$.ExpressionAttributeNames[ '#partitionKeyName' ] = $$[$0-2].partition.partitionKeyName
			this.$.ExpressionAttributeValues[ ':partitionKeyValue' ] = $$[$0-2].partition.partitionKeyValue
			this.$.KeyConditionExpression = ' #partitionKeyName =  :partitionKeyValue '


			if ($$[$0].sort) {
				this.$.ExpressionAttributeNames[ '#sortKeyName' ] = $$[$0].sort.sortKeyName

				switch ($$[$0].sort.op) {
					case '=':
					case '>':
					case '>=':
					case '<':
					case '<=':
						this.$.ExpressionAttributeValues[ ':sortKeyValue' ] = $$[$0].sort.sortKeyValue
						this.$.KeyConditionExpression += ' AND #sortKeyName ' + $$[$0].sort.op + ' :sortKeyValue '

						break;
					case 'BETWEEN':
						this.$.ExpressionAttributeValues[ ':sortKeyValue1' ] = $$[$0].sort.sortKeyValue1
						this.$.ExpressionAttributeValues[ ':sortKeyValue2' ] = $$[$0].sort.sortKeyValue2
						this.$.KeyConditionExpression += ' AND #sortKeyName BETWEEN :sortKeyValue1 AND :sortKeyValue2'
						break;
					case 'BEGINS_WITH':

						if ($$[$0].sort.sortKeyValue.S.slice(-1) !== '%' )
							throw "LIKE '%string' must end with a % for sort key "


						$$[$0].sort.sortKeyValue.S = $$[$0].sort.sortKeyValue.S.slice(0,-1)

						this.$.ExpressionAttributeValues[ ':sortKeyValue' ] = $$[$0].sort.sortKeyValue
						this.$.KeyConditionExpression += ' AND begins_with ( #sortKeyName, :sortKeyValue ) '

						break;
				}

			}


		
break;
case 790: case 879:
 this.$ = {having: $$[$0]}; 
break;
case 792:

			this.$ = {
				dynamodb: {
					TableName: $$[$0-3],
					IndexName: $$[$0-2],
				},
				columns:$$[$0-4]
			};
			yy.extend(this.$.dynamodb,$$[$0-5]);
			yy.extend(this.$.dynamodb,$$[$0-1]);
			yy.extend(this.$.dynamodb,$$[$0]);

			// if we have star, then the rest does not matter
			if (this.$.columns.filter(function(c) { return c.type === 'star'}).length === 0) {
				if (!this.$.dynamodb.hasOwnProperty('ExpressionAttributeNames'))
					this.$.dynamodb.ExpressionAttributeNames = {}

				var ExpressionAttributeNames_from_projection = { }
				var ProjectionExpression = []
				this.$.columns.map(function(c) {
					if (c.type === "column") {
						var replaced_name = '#projection_' + c.column.split('-').join('_minus_').split('.').join('_dot_')
						ExpressionAttributeNames_from_projection[replaced_name] = c.column;
						ProjectionExpression.push(replaced_name)
					}

				})

				yy.extend(this.$.dynamodb.ExpressionAttributeNames,ExpressionAttributeNames_from_projection);

				if (ProjectionExpression.length)
					this.$.dynamodb.ProjectionExpression = ProjectionExpression.join(' , ')

			}


		
break;
case 794: case 821: case 883:
 this.$ = {bind_parameter: $$[$0]}; 
break;
case 795: case 822: case 884:
 this.$ = {column: $$[$0]}; 
break;
case 796: case 823: case 885:
 this.$ = {op: 'AND', left: $$[$0-2], right: $$[$0]}; 
break;
case 797: case 824: case 886:
 this.$ = {op: 'OR', left: $$[$0-2], right: $$[$0]}; 
break;
case 798: case 825: case 887:
 this.$ = {op: '=', left: $$[$0-2], right: $$[$0]}; 
break;
case 799: case 826: case 888:
 this.$ = {op: '>', left: $$[$0-2], right: $$[$0]}; 
break;
case 800: case 827: case 889:
 this.$ = {op: '>=', left: $$[$0-2], right: $$[$0]}; 
break;
case 801: case 828: case 890:
 this.$ = {op: '<', left: $$[$0-2], right: $$[$0]}; 
break;
case 802: case 829: case 891:
 this.$ = {op: '<=', left: $$[$0-2], right: $$[$0]}; 
break;
case 803: case 830: case 892:
 this.$ = {op: 'BETWEEN', left: $$[$0-2], right:$$[$0] }; 
break;
case 804: case 831: case 893:
 this.$ = {op: 'LIKE', left:$$[$0-2], right: { type: 'string', string: $$[$0] } }; 
break;
case 805:

			this.$ = {
				partition: {
					partitionKeyName: $$[$0-2],
					partitionKeyValue: $$[$0]
				}
			}
		
break;
case 807:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue: $$[$0],
					op: '='
				}
			}
		
break;
case 808:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue: $$[$0],
					op: '>'
				}
			}
		
break;
case 809:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue: $$[$0],
					op: '>='
				}
			}
		
break;
case 810:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue: $$[$0],
					op: '<'
				}
			}
		
break;
case 811:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue: $$[$0],
					op: '<='
				}
			}
		
break;
case 812:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue1: $$[$0][0],
					sortKeyValue2: $$[$0][1],
					op: 'BETWEEN'
				}
			}
		
break;
case 813:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue: $$[$0],
					op: 'BEGINS_WITH'
				}
			}
		
break;
case 817:
 this.$ = {left: { type: 'number', number: $$[$0-2]}, right: {type: 'number', number: $$[$0] } }; 
break;
case 818:
 this.$ = {left: { type: 'string', string: $$[$0-2]}, right: {type: 'string', string: $$[$0] } }; 
break;
case 832: case 894:
 this.$ = {op: 'CONTAINS', left:$$[$0-2], right: { type: 'string', string: $$[$0] } }; 
break;
case 833: case 895:
 this.$ = {op: 'CONTAINS', left:$$[$0-2], right: { type: 'number', number: $$[$0] } }; 
break;
case 834: case 896:
 this.$ = {op: 'CONTAINS', left:$$[$0-2], right: { type: 'boolean', value: $$[$0] } }; 
break;
case 835:

			this.$ = {
				statement: 'CREATE_TABLE',
				operation: 'createTable',
				dynamodb: {
					TableName: $$[$0-6],
					AttributeDefinitions: $$[$0-4],
				}
				
			};
			yy.extend(this.$.dynamodb,$$[$0-2]); // extend with pk
			yy.extend(this.$.dynamodb,$$[$0-1]); // extend with indexes
		
break;
case 837:

			var indexes = {
				LocalSecondaryIndexes: [],
				GlobalSecondaryIndexes: []
			}
			
			$$[$0].map(function(idx) {
				if (idx.hasOwnProperty('LSI'))
					indexes.LocalSecondaryIndexes.push(idx.LSI)
				if (idx.hasOwnProperty('GSI'))
					indexes.GlobalSecondaryIndexes.push(idx.GSI)
			})
			this.$ = indexes
		
break;
case 840:

			this.$ = {}
			this.$[$$[$0-4]] = { 
				IndexName: $$[$0-5], 
				KeySchema: [ { AttributeName: $$[$0-2], KeyType: 'HASH' } ], 
				Projection: $$[$0],
			}
		
break;
case 841:

			this.$ = {}
			this.$[$$[$0-5]] = { 
				IndexName: $$[$0-6], 
				KeySchema: [ { AttributeName: $$[$0-3], KeyType: 'HASH' } ], 
				Projection: $$[$0-1],
				ProvisionedThroughput: $$[$0] 
			}
		
break;
case 842:

			this.$ = {}
			this.$[$$[$0-6]] = { 
				IndexName: $$[$0-7], 
				KeySchema: [ { AttributeName: $$[$0-4], KeyType: 'HASH' }, { AttributeName: $$[$0-2], KeyType: 'RANGE' } ], 
				Projection: $$[$0],
			}
		
break;
case 843:

			this.$ = {}
			this.$[$$[$0-7]] = { 
				IndexName: $$[$0-8], 
				KeySchema: [ { AttributeName: $$[$0-5], KeyType: 'HASH' }, { AttributeName: $$[$0-3], KeyType: 'RANGE' } ], 
				Projection: $$[$0-1],
				ProvisionedThroughput: $$[$0] 
			}
		
break;
case 844:
 this.$ = { KeySchema: [ { AttributeName: $$[$0-2], KeyType: 'HASH' }], ProvisionedThroughput: $$[$0] }  
break;
case 845:
 this.$ = { KeySchema: [ { AttributeName: $$[$0-4], KeyType: 'HASH' } , { AttributeName: $$[$0-2], KeyType: 'RANGE' } ], ProvisionedThroughput: $$[$0] }  
break;
case 846:
 this.$ = { ReadCapacityUnits: 1, WriteCapacityUnits: 1 }; 
break;
case 847:
 this.$ = { ReadCapacityUnits: eval($$[$0-1]), WriteCapacityUnits: eval($$[$0]) } 
break;
case 848: case 849:
 this.$ = { ProjectionType: 'ALL' }; 
break;
case 850:
 this.$ = { ProjectionType: 'KEYS_ONLY' } 
break;
case 851:
 this.$ = { ProjectionType: 'INCLUDE', NonKeyAttributes: $$[$0-1] } 
break;
case 854:
 this.$ = $$[$0-2]; this.$.push($$[$0]) 
break;
case 856:
 this.$ = { AttributeName: $$[$0-1], AttributeType: 'S'}; 
break;
case 857:
 this.$ = { AttributeName: $$[$0-1], AttributeType: 'N'}; 
break;
case 858:

			this.$ = {
				statement: 'SHOW_TABLES',
				operation: 'listTables',
				dynamodb: {}
			}
		
break;
case 859:

			this.$ = {
				statement: 'DROP_TABLE',
				operation: 'deleteTable',
				dynamodb: {
					TableName: $$[$0]
				}
			};
		
break;
case 860:

			this.$ = {
				statement: 'DESCRIBE_TABLE',
				operation: 'describeTable',
				dynamodb: {
					TableName: $$[$0]
				}
			};
		
break;
case 865:

			this.$ = {
				statement: 'DROP_INDEX',
				operation: 'updateTable',
				dynamodb: {
					TableName: $$[$0],
					GlobalSecondaryIndexUpdates: [
						{
							Delete: {
								IndexName: $$[$0-2]
							}
						}
					]
				}
			};
		
break;
case 866:

			this.$ = {
				statement: 'SCAN', 
				operation: 'scan',
				dynamodb: $$[$0-2].dynamodb,
			};

			this.$.columns = $$[$0-2].columns
			this.$.having  = Object.keys($$[$0-2].having).length ? $$[$0-2].having : undefined;
			
			yy.extend(this.$.dynamodb, $$[$0-1]);
			yy.extend(this.$.dynamodb, $$[$0]);
		
break;
case 867:

			this.$ = {
				dynamodb: {
					TableName: $$[$0-2],
					IndexName: $$[$0-1],
				},
				columns:$$[$0-4],
				having: {},
			}; 
			yy.extend(this.$,$$[$0]); // filter


			// if we have star, then the rest does not matter
			if (this.$.columns.filter(function(c) { return c.type === 'star'}).length === 0) {
				if (!this.$.dynamodb.hasOwnProperty('ExpressionAttributeNames'))
					this.$.dynamodb.ExpressionAttributeNames = {}

				var ExpressionAttributeNames_from_projection = { }
				var ProjectionExpression = []
				this.$.columns.map(function(c) {
					if (c.type === "column") {
						var replaced_name = '#projection_' + c.column.split('-').join('_minus_').split('.').join('_dot_') 
						ExpressionAttributeNames_from_projection[replaced_name] = c.column;
						ProjectionExpression.push(replaced_name)
					}	
				})
				
				yy.extend(this.$.dynamodb.ExpressionAttributeNames,ExpressionAttributeNames_from_projection);
				
				if (ProjectionExpression.length)
					this.$.dynamodb.ProjectionExpression = ProjectionExpression.join(' , ')
			
			}


		
break;
case 869:
 this.$ = {Limit: $$[$0]}; 
break;
case 871:
 this.$ = { ConsistentRead: true  }; 
break;
case 897:

			this.$ = $$[$0]
		
break;
}
},
table: [{3:1,4:2,7:3,8:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,62:$V0,152:$V1,173:$V2,178:$V3,191:$V4,291:$V5,456:$V6,484:$V7,493:$V8,507:$V9,589:$Va,691:16,726:25},{1:[3]},{5:[1,29],6:[1,30]},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),o($Vb,[2,13]),o($Vb,[2,14]),o($Vb,[2,15]),o($Vc,[2,773],{692:31,177:[1,32]}),{271:[1,34],297:[2,727],676:33},{20:36,21:$Vd,22:$Ve,25:35},{297:[1,39]},{245:[1,40]},{549:[1,41]},{54:[1,42]},{279:[1,44],549:[1,43]},{549:[1,45]},o($Vf,[2,868],{727:46,320:[1,47]}),{29:$Vg,31:$Vh,32:$Vi,41:$Vj,364:$Vk,597:$Vl,625:56,627:55,654:48,656:$Vm,661:52,664:49,666:53,669:54,671:50},o($Vn,[2,777],{695:63,60:[1,65],186:[1,64]}),{20:69,21:$Vd,22:$Ve,673:$Vo,729:66,732:67},{1:[2,1]},{7:70,8:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,62:$V0,152:$V1,173:$V2,178:$V3,191:$V4,291:$V5,456:$V6,484:$V7,493:$V8,507:$V9,589:$Va,691:16,726:25},o($Vf,[2,771],{693:71,320:[1,72]}),o($Vc,[2,774]),{297:[1,73]},{297:[2,728]},{501:[1,74]},o([5,6,45,263,320,501,593,601,614,656],[2,20]),o($Vp,[2,16]),o($Vp,[2,17]),{20:36,21:$Vd,22:$Ve,25:75},{20:36,21:$Vd,22:$Ve,25:76},{20:36,21:$Vd,22:$Ve,25:77},o($Vb,[2,858]),{20:36,21:$Vd,22:$Ve,25:78},{20:80,21:$Vd,22:$Ve,27:79},{21:[1,83],22:[1,84],29:[1,419],36:[1,623],37:[1,273],39:86,40:[1,88],41:[1,89],42:[1,90],43:[1,91],44:[1,92],45:[1,93],46:[1,94],47:[1,95],48:[1,96],49:[1,97],50:[1,98],51:[1,99],52:[1,100],53:[1,101],54:[1,102],55:[1,103],56:[1,104],57:[1,105],58:[1,106],59:[1,107],60:[1,108],61:[1,109],62:[1,110],63:87,64:[1,111],65:[1,112],66:[1,113],67:[1,114],68:[1,115],69:[1,116],70:[1,117],71:[1,118],72:[1,119],73:[1,120],74:[1,121],75:[1,122],76:[1,123],77:[1,124],78:[1,125],79:[1,126],80:[1,127],81:[1,128],82:[1,129],83:[1,130],84:[1,131],85:[1,132],86:[1,133],87:[1,134],88:[1,135],89:[1,136],90:[1,137],91:[1,138],92:[1,139],93:[1,140],94:[1,141],95:[1,142],96:[1,143],97:[1,144],98:[1,145],99:[1,146],100:[1,147],101:[1,148],102:[1,149],103:[1,150],104:[1,151],105:[1,152],106:[1,153],107:[1,154],108:[1,155],109:[1,156],110:[1,157],111:[1,158],112:[1,159],113:[1,160],114:[1,161],115:[1,162],116:[1,163],117:[1,164],118:[1,165],119:[1,166],120:[1,167],121:[1,168],122:[1,169],123:[1,170],124:[1,171],125:[1,172],126:[1,173],127:[1,174],128:[1,175],129:[1,176],130:[1,177],131:[1,178],132:[1,179],133:[1,180],134:[1,181],135:[1,182],136:[1,183],137:[1,184],138:[1,185],139:[1,186],140:[1,187],141:[1,188],142:[1,189],143:[1,190],144:[1,191],145:[1,192],146:[1,193],147:[1,194],148:[1,195],149:[1,196],150:[1,197],151:[1,198],152:[1,199],153:[1,200],154:[1,201],155:[1,202],156:[1,203],157:[1,204],158:[1,205],159:[1,206],160:[1,207],161:[1,208],162:[1,209],163:[1,210],164:[1,211],165:[1,212],166:[1,213],167:[1,214],168:[1,215],169:[1,216],170:[1,217],171:[1,218],172:[1,219],173:[1,220],174:[1,221],175:[1,222],176:[1,223],177:[1,224],178:[1,225],179:[1,226],180:[1,227],181:[1,228],182:[1,229],183:[1,230],184:[1,231],185:[1,232],186:[1,233],187:[1,234],188:[1,235],189:[1,236],190:[1,237],191:[1,238],192:[1,239],193:[1,240],194:[1,241],195:[1,242],196:[1,243],197:[1,244],198:[1,245],199:[1,246],200:[1,247],201:[1,248],202:[1,249],203:[1,250],204:[1,251],205:[1,252],206:[1,253],207:[1,254],208:[1,255],209:[1,256],210:[1,257],211:[1,258],212:[1,259],213:[1,260],214:[1,261],215:[1,262],216:[1,263],217:[1,264],218:[1,265],219:[1,266],220:[1,267],221:[1,268],222:[1,269],223:[1,270],224:[1,271],225:[1,272],226:[1,274],227:[1,275],228:[1,276],229:[1,277],230:[1,278],231:[1,279],232:[1,280],233:[1,281],234:[1,282],235:[1,283],236:[1,284],237:[1,285],238:[1,286],239:[1,287],240:[1,288],241:[1,289],242:[1,290],243:[1,291],244:[1,292],245:[1,293],246:[1,294],247:[1,295],248:[1,296],249:[1,297],250:[1,298],251:[1,299],252:[1,300],253:[1,301],254:[1,302],255:[1,303],256:[1,304],257:[1,305],258:[1,306],259:[1,307],260:[1,308],261:[1,309],262:[1,310],263:[1,311],264:[1,312],265:[1,313],266:[1,314],267:[1,315],268:[1,316],269:[1,317],270:[1,318],271:[1,319],272:[1,320],273:[1,321],274:[1,322],275:[1,323],276:[1,324],277:[1,325],278:[1,326],279:[1,327],280:[1,328],281:[1,329],282:[1,330],283:[1,331],284:[1,332],285:[1,333],286:[1,334],287:[1,335],288:[1,336],289:[1,337],290:[1,338],291:[1,339],292:[1,340],293:[1,341],294:[1,342],295:[1,343],296:[1,344],297:[1,345],298:[1,346],299:[1,347],300:[1,348],301:[1,349],302:[1,350],303:[1,351],304:[1,352],305:[1,353],306:[1,354],307:[1,355],308:[1,356],309:[1,357],310:[1,358],311:[1,359],312:[1,360],313:[1,361],314:[1,362],315:[1,363],316:[1,364],317:[1,365],318:[1,366],319:[1,367],320:[1,368],321:[1,369],322:[1,370],323:[1,371],324:[1,372],325:[1,373],326:[1,374],327:[1,375],328:[1,376],329:[1,377],330:[1,378],331:[1,379],332:[1,380],333:[1,381],334:[1,382],335:[1,383],336:[1,384],337:[1,385],338:[1,386],339:[1,387],340:[1,388],341:[1,389],342:[1,390],343:[1,391],344:[1,392],345:[1,393],346:[1,394],347:[1,395],348:[1,396],349:[1,397],350:[1,398],351:[1,399],352:[1,400],353:[1,401],354:[1,402],355:[1,403],356:[1,404],357:[1,405],358:[1,406],359:[1,407],360:[1,408],361:[1,409],362:[1,410],363:[1,411],364:[1,412],365:[1,413],366:[1,414],367:[1,415],368:[1,416],369:[1,417],370:[1,418],371:[1,420],372:[1,421],373:[1,422],374:[1,423],375:[1,424],376:[1,425],377:[1,426],378:[1,427],379:[1,428],380:[1,429],381:[1,430],382:[1,431],383:[1,432],384:[1,433],385:[1,434],386:[1,435],387:[1,436],388:[1,437],389:[1,438],390:[1,439],391:[1,440],392:[1,441],393:[1,442],394:[1,443],395:[1,444],396:[1,445],397:[1,446],398:[1,447],399:[1,448],400:[1,449],401:[1,450],402:[1,451],403:[1,452],404:[1,453],405:[1,454],406:[1,455],407:[1,456],408:[1,457],409:[1,458],410:[1,459],411:[1,460],412:[1,461],413:[1,462],414:[1,463],415:[1,464],416:[1,465],417:[1,466],418:[1,467],419:[1,468],420:[1,469],421:[1,470],422:[1,471],423:[1,472],424:[1,473],425:[1,474],426:[1,475],427:[1,476],428:[1,477],429:[1,478],430:[1,479],431:[1,480],432:[1,481],433:[1,482],434:[1,483],435:[1,484],436:[1,485],437:[1,486],438:[1,487],439:[1,488],440:[1,489],441:[1,490],442:[1,491],443:[1,492],444:[1,493],445:[1,494],446:[1,495],447:[1,496],448:[1,497],449:[1,498],450:[1,499],451:[1,500],452:[1,501],453:[1,502],454:[1,503],455:[1,504],456:[1,505],457:[1,506],458:[1,507],459:[1,508],460:[1,509],461:[1,510],462:[1,511],463:[1,512],464:[1,513],465:[1,514],466:[1,515],467:[1,516],468:[1,517],469:[1,518],470:[1,519],471:[1,520],472:[1,521],473:[1,522],474:[1,523],475:[1,524],476:[1,525],477:[1,526],478:[1,527],479:[1,528],480:[1,529],481:[1,530],482:[1,531],483:[1,532],484:[1,533],485:[1,534],486:[1,535],487:[1,536],488:[1,537],489:[1,538],490:[1,539],491:[1,540],492:[1,541],493:[1,542],494:[1,543],495:[1,544],496:[1,545],497:[1,546],498:[1,547],499:[1,548],500:[1,549],501:[1,550],502:[1,551],503:[1,552],504:[1,553],505:[1,554],506:[1,555],507:[1,556],508:[1,557],509:[1,558],510:[1,559],511:[1,560],512:[1,561],513:[1,562],514:[1,563],515:[1,564],516:[1,565],517:[1,566],518:[1,567],519:[1,568],520:[1,569],521:[1,570],522:[1,571],523:[1,572],524:[1,573],525:[1,574],526:[1,575],527:[1,576],528:[1,577],529:[1,578],530:[1,579],531:[1,580],532:[1,581],533:[1,582],534:[1,583],535:[1,584],536:[1,585],537:[1,586],538:[1,587],539:[1,588],540:[1,589],541:[1,590],542:[1,591],543:[1,592],544:[1,593],545:[1,594],546:[1,595],547:[1,596],548:[1,597],549:[1,598],550:[1,599],551:[1,600],552:[1,601],553:[1,602],554:[1,603],555:[1,604],556:[1,605],557:[1,606],558:[1,607],559:[1,608],560:[1,609],561:[1,610],562:[1,611],563:[1,612],564:[1,613],565:[1,614],566:[1,615],567:[1,616],568:[1,617],569:[1,618],570:[1,619],571:[1,620],572:[1,621],573:[1,622],574:[1,624],575:[1,625],576:[1,626],577:[1,627],578:[1,628],579:[1,629],580:[1,630],581:[1,631],582:[1,632],583:[1,633],584:[1,634],585:[1,635],586:[1,636],587:[1,637],588:[1,638],589:[1,639],590:[1,640],591:[1,641],592:[1,642],593:[1,643],594:[1,644],595:[1,645],596:[1,646],597:[1,647],598:[1,648],599:[1,649],600:[1,650],601:[1,651],602:[1,652],603:[1,653],604:[1,654],605:[1,655],606:[1,656],607:[1,657],608:[1,658],609:[1,659],610:[1,660],611:[1,661],612:[1,662],613:[1,663],614:[1,664],615:[1,665],616:[1,666],617:[1,667],618:[1,668],619:[1,669],620:[1,670],621:[1,671],622:[1,672],623:[1,673],624:[1,674],675:85,724:81,725:82},o($Vb,[2,870],{728:675,45:[1,676]}),{28:677,29:$Vq},o($Vb,[2,897]),o([5,6,45,67,177,263,320,614,638,647],[2,710],{347:$Vr,672:$Vs,673:$Vt,674:$Vu}),o($Vv,[2,712]),{29:$Vg,31:$Vh,32:$Vi,41:$Vj,364:$Vk,597:$Vl,625:56,627:55,656:$Vm,661:52,664:683,666:53,669:54,671:50},o($Vv,[2,718]),o($Vv,[2,719]),o($Vv,[2,720]),o($Vv,[2,721]),o($Vv,[2,722]),{160:$Vw},{24:[1,685]},{656:[1,686]},o($Vx,[2,624]),o($Vx,[2,620]),o($Vx,[2,621]),{20:690,21:$Vd,22:$Ve,673:$Vy,696:687,697:688},o($Vn,[2,778]),o($Vn,[2,779]),{245:[1,691],638:[1,692]},o($Vz,[2,873]),o($Vz,[2,874]),o($Vz,[2,875],{71:[1,693]}),o($Vb,[2,2]),o($Vb,[2,775],{694:694,45:[1,695]}),{28:696,29:$Vq},{20:36,21:$Vd,22:$Ve,25:697},{20:700,21:$Vd,22:$Ve,682:698,684:699},{501:[1,701]},{614:[1,702]},{656:[1,703]},o($Vb,[2,859]),{377:[1,704]},{377:[2,22]},o($Vb,[2,860]),o($Vb,[2,861]),o($Vb,[2,862]),o($Vb,[2,863]),o($Vb,[2,864]),o($Vb,[2,723]),o($Vb,[2,724]),o($Vb,[2,33]),o($Vb,[2,34]),o($Vb,[2,35]),o($Vb,[2,36]),o($Vb,[2,37]),o($Vb,[2,38]),o($Vb,[2,39]),o($Vb,[2,40]),o($Vb,[2,41]),o($Vb,[2,42]),o($Vb,[2,43]),o($Vb,[2,44]),o($Vb,[2,45]),o($Vb,[2,46]),o($Vb,[2,47]),o($Vb,[2,48]),o($Vb,[2,49]),o($Vb,[2,50]),o($Vb,[2,51]),o($Vb,[2,52]),o($Vb,[2,53]),o($Vb,[2,54]),o($Vb,[2,55]),o($Vb,[2,56]),o($Vb,[2,57]),o($Vb,[2,58]),o($Vb,[2,59]),o($Vb,[2,60]),o($Vb,[2,61]),o($Vb,[2,62]),o($Vb,[2,63]),o($Vb,[2,64]),o($Vb,[2,65]),o($Vb,[2,66]),o($Vb,[2,67]),o($Vb,[2,68]),o($Vb,[2,69]),o($Vb,[2,70]),o($Vb,[2,71]),o($Vb,[2,72]),o($Vb,[2,73]),o($Vb,[2,74]),o($Vb,[2,75]),o($Vb,[2,76]),o($Vb,[2,77]),o($Vb,[2,78]),o($Vb,[2,79]),o($Vb,[2,80]),o($Vb,[2,81]),o($Vb,[2,82]),o($Vb,[2,83]),o($Vb,[2,84]),o($Vb,[2,85]),o($Vb,[2,86]),o($Vb,[2,87]),o($Vb,[2,88]),o($Vb,[2,89]),o($Vb,[2,90]),o($Vb,[2,91]),o($Vb,[2,92]),o($Vb,[2,93]),o($Vb,[2,94]),o($Vb,[2,95]),o($Vb,[2,96]),o($Vb,[2,97]),o($Vb,[2,98]),o($Vb,[2,99]),o($Vb,[2,100]),o($Vb,[2,101]),o($Vb,[2,102]),o($Vb,[2,103]),o($Vb,[2,104]),o($Vb,[2,105]),o($Vb,[2,106]),o($Vb,[2,107]),o($Vb,[2,108]),o($Vb,[2,109]),o($Vb,[2,110]),o($Vb,[2,111]),o($Vb,[2,112]),o($Vb,[2,113]),o($Vb,[2,114]),o($Vb,[2,115]),o($Vb,[2,116]),o($Vb,[2,117]),o($Vb,[2,118]),o($Vb,[2,119]),o($Vb,[2,120]),o($Vb,[2,121]),o($Vb,[2,122]),o($Vb,[2,123]),o($Vb,[2,124]),o($Vb,[2,125]),o($Vb,[2,126]),o($Vb,[2,127]),o($Vb,[2,128]),o($Vb,[2,129]),o($Vb,[2,130]),o($Vb,[2,131]),o($Vb,[2,132]),o($Vb,[2,133]),o($Vb,[2,134]),o($Vb,[2,135]),o($Vb,[2,136]),o($Vb,[2,137]),o($Vb,[2,138]),o($Vb,[2,139]),o($Vb,[2,140]),o($Vb,[2,141]),o($Vb,[2,142]),o($Vb,[2,143]),o($Vb,[2,144]),o($Vb,[2,145]),o($Vb,[2,146]),o($Vb,[2,147]),o($Vb,[2,148]),o($Vb,[2,149]),o($Vb,[2,150]),o($Vb,[2,151]),o($Vb,[2,152]),o($Vb,[2,153]),o($Vb,[2,154]),o($Vb,[2,155]),o($Vb,[2,156]),o($Vb,[2,157]),o($Vb,[2,158]),o($Vb,[2,159]),o($Vb,[2,160]),o($Vb,[2,161]),o($Vb,[2,162]),o($Vb,[2,163]),o($Vb,[2,164]),o($Vb,[2,165]),o($Vb,[2,166]),o($Vb,[2,167]),o($Vb,[2,168]),o($Vb,[2,169]),o($Vb,[2,170]),o($Vb,[2,171]),o($Vb,[2,172]),o($Vb,[2,173]),o($Vb,[2,174]),o($Vb,[2,175]),o($Vb,[2,176]),o($Vb,[2,177]),o($Vb,[2,178]),o($Vb,[2,179]),o($Vb,[2,180]),o($Vb,[2,181]),o($Vb,[2,182]),o($Vb,[2,183]),o($Vb,[2,184]),o($Vb,[2,185]),o($Vb,[2,186]),o($Vb,[2,187]),o($Vb,[2,188]),o($Vb,[2,189]),o($Vb,[2,190]),o($Vb,[2,191]),o($Vb,[2,192]),o($Vb,[2,193]),o($Vb,[2,194]),o($Vb,[2,195]),o($Vb,[2,196]),o($Vb,[2,197]),o($Vb,[2,198]),o($Vb,[2,199]),o($Vb,[2,200]),o($Vb,[2,201]),o($Vb,[2,202]),o($Vb,[2,203]),o($Vb,[2,204]),o($Vb,[2,205]),o($Vb,[2,206]),o($Vb,[2,207]),o($Vb,[2,208]),o($Vb,[2,209]),o($Vb,[2,210]),o($Vb,[2,211]),o($Vb,[2,212]),o($Vb,[2,213]),o($Vb,[2,214]),o($Vb,[2,215]),o($Vb,[2,216]),o($Vb,[2,217]),o($Vb,[2,218]),o($Vb,[2,219]),o($Vb,[2,220]),o($Vb,[2,221]),o($Vb,[2,222]),o($Vb,[2,223]),o($Vb,[2,224]),o($Vb,[2,225]),o($Vb,[2,226]),o($Vb,[2,227]),o($Vb,[2,228]),o($Vb,[2,229]),o($Vb,[2,230]),o($Vb,[2,231]),o($Vb,[2,232]),o($Vb,[2,233]),o($Vb,[2,234]),o($Vb,[2,235]),o($Vb,[2,236]),o($Vb,[2,237]),o($Vb,[2,238]),o($Vb,[2,239]),o($Vb,[2,240]),o($Vb,[2,241]),o($Vb,[2,242]),o($Vb,[2,243]),o($Vb,[2,244]),o($Vb,[2,245]),o($Vb,[2,246]),o($Vb,[2,247]),o($Vb,[2,248]),o($Vb,[2,249]),o($Vb,[2,250]),o($Vb,[2,251]),o($Vb,[2,252]),o($Vb,[2,253]),o($Vb,[2,254]),o($Vb,[2,255]),o($Vb,[2,256]),o($Vb,[2,257]),o($Vb,[2,258]),o($Vb,[2,259]),o($Vb,[2,260]),o($Vb,[2,261]),o($Vb,[2,262]),o($Vb,[2,263]),o($Vb,[2,264]),o($Vb,[2,265]),o($Vb,[2,266]),o($Vb,[2,267]),o($Vb,[2,268]),o($Vb,[2,269]),o($Vb,[2,270]),o($Vb,[2,271]),o($Vb,[2,272]),o($Vb,[2,273]),o($Vb,[2,274]),o($Vb,[2,275]),o($Vb,[2,276]),o($Vb,[2,277]),o($Vb,[2,278]),o($Vb,[2,279]),o($Vb,[2,280]),o($Vb,[2,281]),o($Vb,[2,282]),o($Vb,[2,283]),o($Vb,[2,284]),o($Vb,[2,285]),o($Vb,[2,286]),o($Vb,[2,287]),o($Vb,[2,288]),o($Vb,[2,289]),o($Vb,[2,290]),o($Vb,[2,291]),o($Vb,[2,292]),o($Vb,[2,293]),o($Vb,[2,294]),o($Vb,[2,295]),o($Vb,[2,296]),o($Vb,[2,297]),o($Vb,[2,298]),o($Vb,[2,299]),o($Vb,[2,300]),o($Vb,[2,301]),o($Vb,[2,302]),o($Vb,[2,303]),o($Vb,[2,304]),o($Vb,[2,305]),o($Vb,[2,306]),o($Vb,[2,307]),o($Vb,[2,308]),o($Vb,[2,309]),o($Vb,[2,310]),o($Vb,[2,311]),o($Vb,[2,312]),o($Vb,[2,313]),o($Vb,[2,314]),o($Vb,[2,315]),o($Vb,[2,316]),o($Vb,[2,317]),o($Vb,[2,318]),o($Vb,[2,319]),o($Vb,[2,320]),o($Vb,[2,321]),o($Vb,[2,322]),o($Vb,[2,323]),o($Vb,[2,324]),o($Vb,[2,325]),o($Vb,[2,326]),o($Vb,[2,327]),o($Vb,[2,328]),o($Vb,[2,329]),o($Vb,[2,330]),o($Vb,[2,331]),o($Vb,[2,332]),o($Vb,[2,333]),o($Vb,[2,334]),o($Vb,[2,335]),o($Vb,[2,336]),o($Vb,[2,337]),o($Vb,[2,338]),o($Vb,[2,339]),o($Vb,[2,340]),o($Vb,[2,341]),o($Vb,[2,342]),o($Vb,[2,343]),o($Vb,[2,344]),o($Vb,[2,345]),o($Vb,[2,346]),o($Vb,[2,347]),o($Vb,[2,348]),o($Vb,[2,349]),o($Vb,[2,350]),o($Vb,[2,351]),o($Vb,[2,352]),o($Vb,[2,353]),o($Vb,[2,354]),o($Vb,[2,355]),o($Vb,[2,356]),o($Vb,[2,357]),o($Vb,[2,358]),o($Vb,[2,359]),o($Vb,[2,360]),o($Vb,[2,361]),o($Vb,[2,362]),o($Vb,[2,363]),o($Vb,[2,364]),o($Vb,[2,365]),o($Vb,[2,366]),o($Vb,[2,367]),o($Vb,[2,368]),o($Vb,[2,369]),o($Vb,[2,370]),o($Vb,[2,371]),o($Vb,[2,372]),o($Vb,[2,373]),o($Vb,[2,374]),o($Vb,[2,375]),o($Vb,[2,376]),o($Vb,[2,377]),o($Vb,[2,378]),o($Vb,[2,379]),o($Vb,[2,380]),o($Vb,[2,381]),o($Vb,[2,382]),o($Vb,[2,383]),o($Vb,[2,384]),o($Vb,[2,385]),o($Vb,[2,386]),o($Vb,[2,387]),o($Vb,[2,388]),o($Vb,[2,389]),o($Vb,[2,390]),o($Vb,[2,391]),o($Vb,[2,392]),o($Vb,[2,393]),o($Vb,[2,394]),o($Vb,[2,395]),o($Vb,[2,396]),o($Vb,[2,397]),o($Vb,[2,398]),o($Vb,[2,399]),o($Vb,[2,400]),o($Vb,[2,401]),o($Vb,[2,402]),o($Vb,[2,403]),o($Vb,[2,404]),o($Vb,[2,405]),o($Vb,[2,406]),o($Vb,[2,407]),o($Vb,[2,408]),o($Vb,[2,409]),o($Vb,[2,410]),o($Vb,[2,411]),o($Vb,[2,412]),o($Vb,[2,413]),o($Vb,[2,414]),o($Vb,[2,415]),o($Vb,[2,416]),o($Vb,[2,417]),o($Vb,[2,418]),o($Vb,[2,419]),o($Vb,[2,420]),o($Vb,[2,421]),o($Vb,[2,422]),o($Vb,[2,423]),o($Vb,[2,424]),o($Vb,[2,425]),o($Vb,[2,426]),o($Vb,[2,427]),o($Vb,[2,428]),o($Vb,[2,429]),o($Vb,[2,430]),o($Vb,[2,431]),o($Vb,[2,432]),o($Vb,[2,433]),o($Vb,[2,434]),o($Vb,[2,435]),o($Vb,[2,436]),o($Vb,[2,437]),o($Vb,[2,438]),o($Vb,[2,439]),o($Vb,[2,440]),o($Vb,[2,441]),o($Vb,[2,442]),o($Vb,[2,443]),o($Vb,[2,444]),o($Vb,[2,445]),o($Vb,[2,446]),o($Vb,[2,447]),o($Vb,[2,448]),o($Vb,[2,449]),o($Vb,[2,450]),o($Vb,[2,451]),o($Vb,[2,452]),o($Vb,[2,453]),o($Vb,[2,454]),o($Vb,[2,455]),o($Vb,[2,456]),o($Vb,[2,457]),o($Vb,[2,458]),o($Vb,[2,459]),o($Vb,[2,460]),o($Vb,[2,461]),o($Vb,[2,462]),o($Vb,[2,463]),o($Vb,[2,464]),o($Vb,[2,465]),o($Vb,[2,466]),o($Vb,[2,467]),o($Vb,[2,468]),o($Vb,[2,469]),o($Vb,[2,470]),o($Vb,[2,471]),o($Vb,[2,472]),o($Vb,[2,473]),o($Vb,[2,474]),o($Vb,[2,475]),o($Vb,[2,476]),o($Vb,[2,477]),o($Vb,[2,478]),o($Vb,[2,479]),o($Vb,[2,480]),o($Vb,[2,481]),o($Vb,[2,482]),o($Vb,[2,483]),o($Vb,[2,484]),o($Vb,[2,485]),o($Vb,[2,486]),o($Vb,[2,487]),o($Vb,[2,488]),o($Vb,[2,489]),o($Vb,[2,490]),o($Vb,[2,491]),o($Vb,[2,492]),o($Vb,[2,493]),o($Vb,[2,494]),o($Vb,[2,495]),o($Vb,[2,496]),o($Vb,[2,497]),o($Vb,[2,498]),o($Vb,[2,499]),o($Vb,[2,500]),o($Vb,[2,501]),o($Vb,[2,502]),o($Vb,[2,503]),o($Vb,[2,504]),o($Vb,[2,505]),o($Vb,[2,506]),o($Vb,[2,507]),o($Vb,[2,508]),o($Vb,[2,509]),o($Vb,[2,510]),o($Vb,[2,511]),o($Vb,[2,512]),o($Vb,[2,513]),o($Vb,[2,514]),o($Vb,[2,515]),o($Vb,[2,516]),o($Vb,[2,517]),o($Vb,[2,518]),o($Vb,[2,519]),o($Vb,[2,520]),o($Vb,[2,521]),o($Vb,[2,522]),o($Vb,[2,523]),o($Vb,[2,524]),o($Vb,[2,525]),o($Vb,[2,526]),o($Vb,[2,527]),o($Vb,[2,528]),o($Vb,[2,529]),o($Vb,[2,530]),o($Vb,[2,531]),o($Vb,[2,532]),o($Vb,[2,533]),o($Vb,[2,534]),o($Vb,[2,535]),o($Vb,[2,536]),o($Vb,[2,537]),o($Vb,[2,538]),o($Vb,[2,539]),o($Vb,[2,540]),o($Vb,[2,541]),o($Vb,[2,542]),o($Vb,[2,543]),o($Vb,[2,544]),o($Vb,[2,545]),o($Vb,[2,546]),o($Vb,[2,547]),o($Vb,[2,548]),o($Vb,[2,549]),o($Vb,[2,550]),o($Vb,[2,551]),o($Vb,[2,552]),o($Vb,[2,553]),o($Vb,[2,554]),o($Vb,[2,555]),o($Vb,[2,556]),o($Vb,[2,557]),o($Vb,[2,558]),o($Vb,[2,559]),o($Vb,[2,560]),o($Vb,[2,561]),o($Vb,[2,562]),o($Vb,[2,563]),o($Vb,[2,564]),o($Vb,[2,565]),o($Vb,[2,566]),o($Vb,[2,567]),o($Vb,[2,568]),o($Vb,[2,569]),o($Vb,[2,570]),o($Vb,[2,571]),o($Vb,[2,572]),o($Vb,[2,573]),o($Vb,[2,574]),o($Vb,[2,575]),o($Vb,[2,576]),o($Vb,[2,577]),o($Vb,[2,578]),o($Vb,[2,579]),o($Vb,[2,580]),o($Vb,[2,581]),o($Vb,[2,582]),o($Vb,[2,583]),o($Vb,[2,584]),o($Vb,[2,585]),o($Vb,[2,586]),o($Vb,[2,587]),o($Vb,[2,588]),o($Vb,[2,589]),o($Vb,[2,590]),o($Vb,[2,591]),o($Vb,[2,592]),o($Vb,[2,593]),o($Vb,[2,594]),o($Vb,[2,595]),o($Vb,[2,596]),o($Vb,[2,597]),o($Vb,[2,598]),o($Vb,[2,599]),o($Vb,[2,600]),o($Vb,[2,601]),o($Vb,[2,602]),o($Vb,[2,603]),o($Vb,[2,604]),o($Vb,[2,605]),o($Vb,[2,606]),o($Vb,[2,607]),o($Vb,[2,608]),o($Vb,[2,609]),o($Vb,[2,610]),o($Vb,[2,611]),o($Vb,[2,612]),o($Vb,[2,613]),o($Vb,[2,614]),o($Vb,[2,615]),o($Vb,[2,616]),o($Vb,[2,617]),o($Vb,[2,618]),o($Vb,[2,619]),o($Vb,[2,866]),o($Vb,[2,871]),o($Vf,[2,869]),o([5,6,29,45,50,67,92,177,319,320,384,638,658,681,707,708,709,710],[2,23]),{29:$Vg,31:$Vh,32:$Vi,41:$Vj,364:$Vk,597:$Vl,625:56,627:55,656:$Vm,661:52,664:705,666:53,669:54,671:50},{29:$Vg,31:$Vh,32:$Vi,41:$Vj,364:$Vk,597:$Vl,625:56,627:55,656:$Vm,661:52,664:706,666:53,669:54,671:50},{29:$Vg,31:$Vh,32:$Vi,41:$Vj,364:$Vk,597:$Vl,625:56,627:55,656:$Vm,661:52,664:707,666:53,669:54,671:50},{29:$Vg,31:$Vh,32:$Vi,41:$Vj,364:$Vk,597:$Vl,625:56,627:55,656:$Vm,661:52,664:708,666:53,669:54,671:50},{347:$Vr,658:[1,709],672:$Vs,673:$Vt,674:$Vu},{656:[1,710]},{21:[1,712],433:[1,713],667:711},{29:$Vg,31:$Vh,32:$Vi,41:$Vj,364:$Vk,597:$Vl,625:56,627:55,656:$Vm,658:[1,714],661:52,664:716,666:53,669:54,670:715,671:50},{245:[1,719],638:[1,718],698:717},o($Vz,[2,781]),o($Vz,[2,782]),o($Vz,[2,783],{71:[1,720]}),{20:36,21:$Vd,22:$Ve,25:721},{20:69,21:$Vd,22:$Ve,673:$Vo,732:722},{20:723,21:$Vd,22:$Ve},o($Vb,[2,770]),o($Vb,[2,776]),o($Vf,[2,772]),{501:[1,724],601:[1,725]},{614:[1,726],638:[1,727]},o($VA,[2,743]),{681:[1,728],685:[1,729]},{20:732,21:$Vd,22:$Ve,687:730,688:731},{20:735,21:$Vd,22:$Ve,689:733,690:734},{20:738,21:$Vd,22:$Ve,715:736,723:737},{20:36,21:$Vd,22:$Ve,25:739},o($VB,[2,714],{673:$Vt,674:$Vu}),o($VB,[2,715],{673:$Vt,674:$Vu}),o($Vv,[2,716]),o($Vv,[2,717]),o($Vv,[2,713]),{29:$Vg,31:$Vh,32:$Vi,41:$Vj,364:$Vk,597:$Vl,625:56,627:55,656:$Vm,658:[2,700],661:52,662:740,664:741,666:53,669:54,671:50},{656:[1,742]},{656:[2,704]},{656:[2,705]},o($Vv,[2,708]),{658:[1,743]},{347:$Vr,658:[2,711],672:$Vs,673:$Vt,674:$Vu},{593:[1,745],614:[2,786],699:744},{20:690,21:$Vd,22:$Ve,673:$Vy,697:746},{20:36,21:$Vd,22:$Ve,25:747},{20:748,21:$Vd,22:$Ve},o($VC,[2,877],{730:749,593:[1,750]}),o($Vz,[2,872]),o($Vz,[2,876]),{20:753,21:$Vd,22:$Ve,677:751,680:752},{656:$VD,678:754,679:755},{20:759,21:$Vd,22:$Ve,683:757,686:758},{20:700,21:$Vd,22:$Ve,684:760},{29:$Vg,31:$Vh,32:$Vi,36:$VE,37:$VF,41:$Vj,52:[1,775],364:$VG,369:$VH,597:$Vl,625:56,627:55,630:762,632:763,633:768,635:$VI,641:765,644:764,645:$VJ,654:761,655:766,656:$Vm,659:767,661:52,664:49,666:53,669:54,671:50},{29:$Vg,31:$Vh,32:$Vi,41:$Vj,364:$Vk,597:$Vl,625:56,627:55,654:776,656:$Vm,661:52,664:49,666:53,669:54,671:50},o($Vb,[2,756],{638:[1,777]}),o($VK,[2,758]),{681:[1,778]},o($Vb,[2,766]),o($Vb,[2,767],{67:[1,779]}),{681:[1,780]},{638:[1,781]},{638:[2,855]},{29:[1,783],536:[1,782]},o($Vb,[2,865]),{658:[1,784]},{347:$Vr,658:[2,701],672:$Vs,673:$Vt,674:$Vu},{29:$Vg,31:$Vh,32:$Vi,41:$Vj,364:$Vk,597:$Vl,625:56,627:55,656:$Vm,658:[2,706],661:52,664:786,666:53,668:785,669:54,671:50},o($Vv,[2,709]),{614:[1,788],700:787},{279:[1,789]},o($Vz,[2,780]),o([593,614],[2,785]),o($Vz,[2,784]),o($Vc,[2,880],{731:790,263:[1,791]}),{279:[1,792]},o($Vb,[2,725],{638:[1,793]}),o($VK,[2,733]),{681:[1,794]},o($Vb,[2,726],{638:[1,795]}),o($VK,[2,730]),{644:796,645:$VJ},o($Vb,[2,741]),o($Vb,[2,753],{67:[1,797]}),{681:[1,798]},o($VA,[2,742]),o($VA,[2,744]),o($VA,[2,745]),o($VA,[2,746]),o($VA,[2,747]),o($VA,[2,748]),o($VA,[2,749]),o($VA,[2,750]),o($VA,[2,752]),o($VL,[2,628]),o($VL,[2,629]),o($VL,[2,631]),o($VM,$VN,{651:799,652:800,653:801,20:802,21:$Vd,22:$Ve,31:$VO,32:$VP}),o($VQ,$VR,{642:805,643:806,628:807,626:808,630:809,632:810,641:811,644:812,29:$VS,31:$VT,32:$VU,36:$VE,37:$VF,369:$VH,635:$VI,645:$VJ}),{55:[1,816],56:[1,817],160:$Vw},o($VA,[2,632]),o($VA,[2,751]),{20:732,21:$Vd,22:$Ve,688:818},{29:$Vg,31:$Vh,32:$Vi,36:$VE,37:$VF,41:$Vj,364:$VG,369:$VH,597:$Vl,625:56,627:55,630:820,632:821,635:$VI,641:823,644:822,645:$VJ,654:819,655:824,656:$Vm,659:825,661:52,664:49,666:53,669:54,671:50},{20:735,21:$Vd,22:$Ve,690:826},{29:$Vg,31:$Vh,32:$Vi,41:$Vj,364:$Vk,597:$Vl,625:56,627:55,654:827,656:$Vm,661:52,664:49,666:53,669:54,671:50},{20:738,21:$Vd,22:$Ve,417:[1,830],716:828,723:829},{638:[2,856]},{638:[2,857]},o($Vv,[2,696],{24:[1,831]}),{658:[1,832]},{347:$Vr,658:[2,707],672:$Vs,673:$Vt,674:$Vu},o($VV,[2,791],{703:833,263:[1,834]}),{20:836,21:$Vd,22:$Ve,701:835},{20:837,21:$Vd,22:$Ve},o($Vc,[2,867]),{20:842,21:$Vd,22:$Ve,28:843,29:$Vq,30:844,31:$VW,32:$VX,33:$VY,34:839,36:$VZ,37:$V_,38:840,706:$V$,733:838},{20:850,21:$Vd,22:$Ve},{20:753,21:$Vd,22:$Ve,680:851},{29:$Vg,31:$Vh,32:$Vi,36:$VE,37:$VF,41:$Vj,364:$VG,369:$VH,597:$Vl,625:56,627:55,630:853,632:854,635:$VI,641:856,644:855,645:$VJ,654:852,655:857,656:$Vm,659:858,661:52,664:49,666:53,669:54,671:50},{656:$VD,679:859},{658:[1,860]},{20:759,21:$Vd,22:$Ve,686:861},{29:$Vg,31:$Vh,32:$Vi,41:$Vj,364:$Vk,597:$Vl,625:56,627:55,654:862,656:$Vm,661:52,664:49,666:53,669:54,671:50},{638:[1,864],647:[1,863]},o($VM,[2,680]),{650:[1,865]},{650:[2,681]},{650:[2,682]},{650:[2,683]},{637:[1,866],638:[1,867]},o($VQ,[2,645]),o($VQ,[2,647]),o($VQ,[2,648]),o($VQ,[2,649]),o($VQ,[2,650]),o($VQ,[2,651]),o($VQ,[2,652]),o($V01,[2,625]),o($V01,[2,622]),o($V01,[2,623]),{656:[1,868]},{656:[1,869]},o($VK,[2,757]),o($VK,[2,759]),o($VK,[2,760]),o($VK,[2,761]),o($VK,[2,762]),o($VK,[2,763]),o($VK,[2,764]),o($VK,[2,765]),o($Vb,[2,768]),o($V11,[2,769]),{638:[1,871],658:[2,836],717:870},{638:[2,854]},{305:[1,872]},{21:[1,873]},o($Vv,[2,703]),o($VV,[2,792]),{20:878,21:$Vd,22:$Ve,28:843,29:$Vq,30:844,31:$VW,32:$VX,33:$VY,34:875,36:$VZ,37:$V_,38:876,704:874,706:$V21},o($V31,[2,788],{67:[1,879]}),{681:[1,880]},{614:[2,787]},o($Vc,[2,879],{50:$V41,67:$V51,92:$V61,319:$V71,384:[1,882],681:$V81,707:$V91,708:$Va1,709:$Vb1,710:$Vc1}),o($Vd1,[2,881]),o($Vd1,[2,882]),o($Vd1,[2,883]),o($Vd1,[2,884]),o($Ve1,[2,27]),o($Ve1,[2,28]),o($Ve1,[2,31]),o($Ve1,[2,32]),o($Ve1,[2,24]),o($Ve1,[2,25]),o($Ve1,[2,26]),o($VC,[2,878]),o($VK,[2,732]),o($VK,[2,734]),o($VK,[2,735]),o($VK,[2,736]),o($VK,[2,737]),o($VK,[2,738]),o($VK,[2,739]),o($VK,[2,740]),o($VK,[2,729]),o($VK,[2,731]),o($Vb,[2,754]),o($V11,[2,755]),o([5,6,614,637,638,647,658],[2,678]),o($VM,$VN,{653:801,20:802,652:891,21:$Vd,22:$Ve,31:$VO,32:$VP}),{29:$Vg,31:$Vh,32:$Vi,36:$VE,37:$VF,41:$Vj,364:$Vk,369:$VH,597:$Vl,625:56,627:55,630:893,632:894,635:$VI,641:895,644:896,645:$VJ,654:892,656:$Vm,661:52,664:49,666:53,669:54,671:50},o($VL,[2,643]),o($VQ,$VR,{628:807,626:808,630:809,632:810,641:811,644:812,643:897,29:$VS,31:$VT,32:$VU,36:$VE,37:$VF,369:$VH,635:$VI,645:$VJ}),{635:[1,898]},{635:[1,899]},{658:[1,900]},{279:$Vf1,718:901,719:902},{656:[1,904]},{656:[1,905]},o($VV,[2,790],{50:$Vg1,67:$Vh1,92:$Vi1,319:$Vj1,384:[1,907],681:$Vk1,707:$Vl1,708:$Vm1,709:$Vn1,710:$Vo1}),o($Ve1,[2,819]),o($Ve1,[2,820]),o($Ve1,[2,821]),o($Ve1,[2,822]),{20:917,21:$Vd,22:$Ve,702:916},{29:$Vg,31:$Vh,32:$Vi,41:$Vj,364:$Vk,597:$Vl,625:56,627:55,654:919,656:$Vm,661:52,664:49,666:53,669:54,671:50,712:918},{20:842,21:$Vd,22:$Ve,28:843,29:$Vq,30:844,31:$VW,32:$VX,33:$VY,34:839,36:$VZ,37:$V_,38:840,706:$V$,733:920},{20:842,21:$Vd,22:$Ve,28:843,29:$Vq,30:844,31:$VW,32:$VX,33:$VY,34:839,36:$VZ,37:$V_,38:840,706:$V$,733:921},{20:842,21:$Vd,22:$Ve,28:843,29:$Vq,30:844,31:$VW,32:$VX,33:$VY,34:839,36:$VZ,37:$V_,38:840,706:$V$,733:922},{20:842,21:$Vd,22:$Ve,28:843,29:$Vq,30:844,31:$VW,32:$VX,33:$VY,34:839,36:$VZ,37:$V_,38:840,706:$V$,733:923},{20:842,21:$Vd,22:$Ve,28:843,29:$Vq,30:844,31:$VW,32:$VX,33:$VY,34:839,36:$VZ,37:$V_,38:840,706:$V$,733:924},{20:842,21:$Vd,22:$Ve,28:843,29:$Vq,30:844,31:$VW,32:$VX,33:$VY,34:839,36:$VZ,37:$V_,38:840,706:$V$,733:925},{20:842,21:$Vd,22:$Ve,28:843,29:$Vq,30:844,31:$VW,32:$VX,33:$VY,34:839,36:$VZ,37:$V_,38:840,706:$V$,733:926},{28:928,29:$Vq,30:929,31:$VW,32:$VX,33:$VY,711:927},{30:930,31:$VW,32:$VX,33:$VY},{28:932,29:$Vq,30:931,31:$VW,32:$VX,33:$VY,36:$VZ,37:$V_,38:933},o($VM,[2,679]),o($VM,[2,685]),o($VM,[2,686]),o($VM,[2,687]),o($VM,[2,688]),o($VM,[2,689]),o($VQ,[2,644]),{31:$Vh,32:$Vi,625:935,657:934},{29:$Vg,627:937,660:936},o($Vb,[2,835]),{638:[1,938],658:[2,837]},o($Vp1,[2,839]),{20:939,21:$Vd,22:$Ve},{20:940,21:$Vd,22:$Ve},{658:[1,941]},{20:878,21:$Vd,22:$Ve,28:843,29:$Vq,30:844,31:$VW,32:$VX,33:$VY,34:875,36:$VZ,37:$V_,38:876,704:942,706:$V21},{20:878,21:$Vd,22:$Ve,28:843,29:$Vq,30:844,31:$VW,32:$VX,33:$VY,34:875,36:$VZ,37:$V_,38:876,704:943,706:$V21},{20:878,21:$Vd,22:$Ve,28:843,29:$Vq,30:844,31:$VW,32:$VX,33:$VY,34:875,36:$VZ,37:$V_,38:876,704:944,706:$V21},{20:878,21:$Vd,22:$Ve,28:843,29:$Vq,30:844,31:$VW,32:$VX,33:$VY,34:875,36:$VZ,37:$V_,38:876,704:945,706:$V21},{20:878,21:$Vd,22:$Ve,28:843,29:$Vq,30:844,31:$VW,32:$VX,33:$VY,34:875,36:$VZ,37:$V_,38:876,704:946,706:$V21},{20:878,21:$Vd,22:$Ve,28:843,29:$Vq,30:844,31:$VW,32:$VX,33:$VY,34:875,36:$VZ,37:$V_,38:876,704:947,706:$V21},{20:878,21:$Vd,22:$Ve,28:843,29:$Vq,30:844,31:$VW,32:$VX,33:$VY,34:875,36:$VZ,37:$V_,38:876,704:948,706:$V21},{28:928,29:$Vq,30:929,31:$VW,32:$VX,33:$VY,711:949},{30:950,31:$VW,32:$VX,33:$VY},{28:952,29:$Vq,30:951,31:$VW,32:$VX,33:$VY,36:$VZ,37:$V_,38:953},o($V31,[2,789]),{92:[1,959],319:[1,960],681:[1,954],707:[1,955],708:[1,956],709:[1,957],710:[1,958]},o($Vq1,[2,805]),o($Vq1,[2,806]),o([5,6,45,67,320,384],[2,885],{50:$V41,92:$V61,319:$V71,681:$V81,707:$V91,708:$Va1,709:$Vb1,710:$Vc1}),o([5,6,45,320,384],[2,886],{50:$V41,67:$V51,92:$V61,319:$V71,681:$V81,707:$V91,708:$Va1,709:$Vb1,710:$Vc1}),o([5,6,45,50,67,92,319,320,384,681],[2,887],{707:$V91,708:$Va1,709:$Vb1,710:$Vc1}),o($Vd1,[2,888]),o($Vd1,[2,889]),o($Vd1,[2,890]),o($Vd1,[2,891]),o($Vd1,[2,892]),{67:[1,961]},{67:[1,962]},o($Vd1,[2,893]),o($Vd1,[2,894]),o($Vd1,[2,895]),o($Vd1,[2,896]),{637:[1,963],638:[1,964]},o($VQ,[2,692]),{637:[1,965],638:[1,966]},o($VQ,[2,695]),{279:$Vf1,719:967},{58:[1,969],59:[1,968]},{638:[1,971],658:[1,970]},o($Vv,[2,697]),o([5,6,45,67,177,320,384],[2,823],{50:$Vg1,92:$Vi1,319:$Vj1,681:$Vk1,707:$Vl1,708:$Vm1,709:$Vn1,710:$Vo1}),o([5,6,45,177,320,384],[2,824],{50:$Vg1,67:$Vh1,92:$Vi1,319:$Vj1,681:$Vk1,707:$Vl1,708:$Vm1,709:$Vn1,710:$Vo1}),o([5,6,45,50,67,92,177,319,320,384,681],[2,825],{707:$Vl1,708:$Vm1,709:$Vn1,710:$Vo1}),o($Ve1,[2,826]),o($Ve1,[2,827]),o($Ve1,[2,828]),o($Ve1,[2,829]),o($Ve1,[2,830]),o($Ve1,[2,831]),o($Ve1,[2,832]),o($Ve1,[2,833]),o($Ve1,[2,834]),{29:$Vg,31:$Vh,32:$Vi,41:$Vj,364:$Vk,597:$Vl,625:56,627:55,654:973,656:$Vm,661:52,664:49,666:53,669:54,671:50,713:972},{29:$Vg,31:$Vh,32:$Vi,41:$Vj,364:$Vk,597:$Vl,625:56,627:55,654:973,656:$Vm,661:52,664:49,666:53,669:54,671:50,713:974},{29:$Vg,31:$Vh,32:$Vi,41:$Vj,364:$Vk,597:$Vl,625:56,627:55,654:973,656:$Vm,661:52,664:49,666:53,669:54,671:50,713:975},{29:$Vg,31:$Vh,32:$Vi,41:$Vj,364:$Vk,597:$Vl,625:56,627:55,654:973,656:$Vm,661:52,664:49,666:53,669:54,671:50,713:976},{29:$Vg,31:$Vh,32:$Vi,41:$Vj,364:$Vk,597:$Vl,625:56,627:55,654:973,656:$Vm,661:52,664:49,666:53,669:54,671:50,713:977},{29:$VS,31:$VT,32:$VU,626:980,628:979,714:978},{31:$VT,32:$VU,626:981},{28:982,29:$Vq},{30:983,31:$VW,32:$VX,33:$VY},{658:[1,984]},{31:$Vh,32:$Vi,625:985},{658:[1,986]},{29:$Vg,627:987},o($Vp1,[2,838]),{656:[1,988]},{656:[1,989]},o($Vp1,$Vr1,{721:990,557:$Vs1}),{20:992,21:$Vd,22:$Ve},o($V31,[2,807]),o($V31,[2,814]),o($V31,[2,808]),o($V31,[2,809]),o($V31,[2,810]),o($V31,[2,811]),o($V31,[2,812]),{67:[1,993]},{67:[1,994]},o($V31,[2,813]),o($Ve1,[2,817]),o($Ve1,[2,818]),o($Vt1,[2,690]),o($VQ,[2,691]),o($Vt1,[2,693]),o($VQ,[2,694]),{20:995,21:$Vd,22:$Ve},{20:996,21:$Vd,22:$Ve},o($Vp1,[2,844]),{28:997,29:$Vq},{658:[1,998]},{29:$VS,628:999},{31:$VT,32:$VU,626:1000},{638:[1,1002],658:[1,1001]},{638:[1,1004],658:[1,1003]},{28:1005,29:$Vq},o($Vp1,$Vr1,{721:1006,557:$Vs1}),o($V31,[2,815]),o($V31,[2,816]),o($Vp1,$Vu1,{720:1007,424:$Vv1}),{20:1009,21:$Vd,22:$Ve},o($Vw1,$Vu1,{720:1010,424:$Vv1}),{20:1011,21:$Vd,22:$Ve},o($Vp1,[2,847]),o($Vp1,[2,845]),o($Vp1,[2,840]),{60:[1,1012],61:[1,1013],656:[1,1014]},{658:[1,1015]},o($Vp1,$Vr1,{721:1016,557:$Vs1}),{658:[1,1017]},o($Vw1,[2,849]),o($Vw1,[2,850]),{20:1019,21:$Vd,22:$Ve,722:1018},o($Vp1,$Vu1,{720:1020,424:$Vv1}),o($Vp1,[2,841]),o($Vw1,$Vu1,{720:1021,424:$Vv1}),{638:[1,1023],658:[1,1022]},o($Vp1,[2,853]),o($Vp1,[2,842]),o($Vp1,$Vr1,{721:1024,557:$Vs1}),o($Vw1,[2,851]),{20:1025,21:$Vd,22:$Ve},o($Vp1,[2,843]),o($Vp1,[2,852])],
defaultActions: {29:[2,1],34:[2,728],80:[2,22],712:[2,704],713:[2,705],737:[2,855],782:[2,856],783:[2,857],802:[2,681],803:[2,682],804:[2,683],829:[2,854],837:[2,787]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 22
break;
case 1:return 31
break;
case 2:return 32
break;
case 3:/* skip -- comments */
break;
case 4:/* skip whitespace */
break;
case 5:return 42
break;
case 6:return 43
break;
case 7:return 44
break;
case 8:return 65
break;
case 9:return 66
break;
case 10:return 67
break;
case 11:return 71
break;
case 12:return 72
break;
case 13:return 79
break;
case 14:return 90
break;
case 15:return 91
break;
case 16:return 92
break;
case 17:return 103
break;
case 18:return 109
break;
case 19:return 111
break;
case 20:return 112
break;
case 21:return 116
break;
case 22:return 125
break;
case 23:return 128
break;
case 24:return 137
break;
case 25:return 45
break;
case 26:return 142
break;
case 27:return 152
break;
case 28:return 153
break;
case 29:return 'CURRENT DATE'
break;
case 30:return 'CURRENT TIME'
break;
case 31:return 'CURRENT TIMESTAMP'
break;
case 32:return 159
break;
case 33:return 167
break;
case 34:return 168
break;
case 35:return 169
break;
case 36:return 173
break;
case 37:return 177
break;
case 38:return 180
break;
case 39:return 186
break;
case 40:return 191
break;
case 41:return 178
break;
case 42:return 195
break;
case 43:return 197
break;
case 44:return 201
break;
case 45:return 205
break;
case 46:return 210
break;
case 47:return 213
break;
case 48:return 216
break;
case 49:return 218
break;
case 50:return 225
break;
case 51:return 238
break;
case 52:return 240
break;
case 53:return 245
break;
case 54:return 246
break;
case 55:return 252
break;
case 56:return 258
break;
case 57:return 263
break;
case 58:return 270
break;
case 59:return 271
break;
case 60:return 272
break;
case 61:return 274
break;
case 62:return 593
break;
case 63:return 279
break;
case 64:return 280
break;
case 65:return 284
break;
case 66:return 286
break;
case 67:return 291
break;
case 68:return 292
break;
case 69:return 295
break;
case 70:return 297
break;
case 71:return 299
break;
case 72:return 49
break;
case 73:return 304
break;
case 74:return 305
break;
case 75:return 315
break;
case 76:return 319
break;
case 77:return 50
break;
case 78:return 320
break;
case 79:return 338
break;
case 80:return 361
break;
case 81:return 366
break;
case 82:return 368
break;
case 83:return 51
break;
case 84:return 369
break;
case 85:return 52
break;
case 86:return 373
break;
case 87:return 375
break;
case 88:return 377
break;
case 89:return 384
break;
case 90:return 385
break;
case 91:return 390
break;
case 92:return 411
break;
case 93:return 53
break;
case 94:return 417
break;
case 95:return 429
break;
case 96:return 432
break;
case 97:return 442
break;
case 98:return 446
break;
case 99:return 448
break;
case 100:return 450
break;
case 101:return 452
break;
case 102:return 454
break;
case 103:return 456
break;
case 104:return 463
break;
case 105:return 470
break;
case 106:return 473
break;
case 107:return 476
break;
case 108:return 493
break;
case 109:return 484
break;
case 110:return 501
break;
case 111:return 549
break;
case 112:return 551
break;
case 113:return 556
break;
case 114:return 562
break;
case 115:return 572
break;
case 116:return 580
break;
case 117:return 581
break;
case 118:return 589
break;
case 119:return 596
break;
case 120:return 598
break;
case 121:return 601
break;
case 122:return 607
break;
case 123:return 612
break;
case 124:return 614
break;
case 125:return 617
break;
case 126:return 36
break;
case 127:return 37
break;
case 128:return 507
break;
case 129:return 54
break;
case 130:return 536
break;
case 131:return 29
break;
case 132:return 55
break;
case 133:return 56
break;
case 134:return 57
break;
case 135:return 557
break;
case 136:return 58
break;
case 137:return 59
break;
case 138:return 424
break;
case 139:return 60
break;
case 140:return 61
break;
case 141:return 364
break;
case 142:return 62
break;
case 143:return 64
break;
case 144:return 65
break;
case 145:return 66
break;
case 146:return 67
break;
case 147:return 68
break;
case 148:return 'ARCHIVE'
break;
case 149:return 69
break;
case 150:return 70
break;
case 151:return 71
break;
case 152:return 72
break;
case 153:return 73
break;
case 154:return 74
break;
case 155:return 75
break;
case 156:return 76
break;
case 157:return 77
break;
case 158:return 78
break;
case 159:return 79
break;
case 160:return 80
break;
case 161:return 81
break;
case 162:return 82
break;
case 163:return 83
break;
case 164:return 84
break;
case 165:return 85
break;
case 166:return 86
break;
case 167:return 87
break;
case 168:return 88
break;
case 169:return 89
break;
case 170:return 90
break;
case 171:return 91
break;
case 172:return 92
break;
case 173:return 93
break;
case 174:return 94
break;
case 175:return 95
break;
case 176:return 96
break;
case 177:return 97
break;
case 178:return 98
break;
case 179:return 99
break;
case 180:return 100
break;
case 181:return 101
break;
case 182:return 102
break;
case 183:return 103
break;
case 184:return 104
break;
case 185:return 105
break;
case 186:return 106
break;
case 187:return 107
break;
case 188:return 108
break;
case 189:return 109
break;
case 190:return 110
break;
case 191:return 111
break;
case 192:return 112
break;
case 193:return 113
break;
case 194:return 114
break;
case 195:return 115
break;
case 196:return 116
break;
case 197:return 117
break;
case 198:return 118
break;
case 199:return 119
break;
case 200:return 120
break;
case 201:return 121
break;
case 202:return 122
break;
case 203:return 123
break;
case 204:return 124
break;
case 205:return 125
break;
case 206:return 126
break;
case 207:return 127
break;
case 208:return 128
break;
case 209:return 129
break;
case 210:return 130
break;
case 211:return 131
break;
case 212:return 132
break;
case 213:return 133
break;
case 214:return 134
break;
case 215:return 135
break;
case 216:return 136
break;
case 217:return 137
break;
case 218:return 138
break;
case 219:return 139
break;
case 220:return 140
break;
case 221:return 141
break;
case 222:return 142
break;
case 223:return 143
break;
case 224:return 144
break;
case 225:return 145
break;
case 226:return 146
break;
case 227:return 147
break;
case 228:return 148
break;
case 229:return 149
break;
case 230:return 150
break;
case 231:return 151
break;
case 232:return 152
break;
case 233:return 153
break;
case 234:return 154
break;
case 235:return 155
break;
case 236:return 156
break;
case 237:return 157
break;
case 238:return 158
break;
case 239:return 159
break;
case 240:return 160
break;
case 241:return 161
break;
case 242:return 162
break;
case 243:return 163
break;
case 244:return 164
break;
case 245:return 165
break;
case 246:return 166
break;
case 247:return 167
break;
case 248:return 168
break;
case 249:return 169
break;
case 250:return 170
break;
case 251:return 171
break;
case 252:return 172
break;
case 253:return 173
break;
case 254:return 174
break;
case 255:return 175
break;
case 256:return 176
break;
case 257:return 177
break;
case 258:return 178
break;
case 259:return 179
break;
case 260:return 180
break;
case 261:return 181
break;
case 262:return 182
break;
case 263:return 183
break;
case 264:return 184
break;
case 265:return 185
break;
case 266:return 186
break;
case 267:return 187
break;
case 268:return 188
break;
case 269:return 189
break;
case 270:return 190
break;
case 271:return 191
break;
case 272:return 192
break;
case 273:return 193
break;
case 274:return 194
break;
case 275:return 195
break;
case 276:return 196
break;
case 277:return 197
break;
case 278:return 198
break;
case 279:return 199
break;
case 280:return 200
break;
case 281:return 201
break;
case 282:return 202
break;
case 283:return 203
break;
case 284:return 204
break;
case 285:return 205
break;
case 286:return 206
break;
case 287:return 207
break;
case 288:return 208
break;
case 289:return 209
break;
case 290:return 210
break;
case 291:return 211
break;
case 292:return 212
break;
case 293:return 213
break;
case 294:return 214
break;
case 295:return 215
break;
case 296:return 216
break;
case 297:return 217
break;
case 298:return 218
break;
case 299:return 219
break;
case 300:return 220
break;
case 301:return 221
break;
case 302:return 222
break;
case 303:return 223
break;
case 304:return 224
break;
case 305:return 225
break;
case 306:return 37
break;
case 307:return 226
break;
case 308:return 227
break;
case 309:return 228
break;
case 310:return 229
break;
case 311:return 230
break;
case 312:return 231
break;
case 313:return 232
break;
case 314:return 233
break;
case 315:return 234
break;
case 316:return 235
break;
case 317:return 236
break;
case 318:return 237
break;
case 319:return 238
break;
case 320:return 239
break;
case 321:return 240
break;
case 322:return 241
break;
case 323:return 242
break;
case 324:return 243
break;
case 325:return 244
break;
case 326:return 245
break;
case 327:return 246
break;
case 328:return 247
break;
case 329:return 248
break;
case 330:return 249
break;
case 331:return 250
break;
case 332:return 251
break;
case 333:return 252
break;
case 334:return 253
break;
case 335:return 254
break;
case 336:return 255
break;
case 337:return 256
break;
case 338:return 257
break;
case 339:return 258
break;
case 340:return 259
break;
case 341:return 260
break;
case 342:return 261
break;
case 343:return 262
break;
case 344:return 263
break;
case 345:return 264
break;
case 346:return 265
break;
case 347:return 266
break;
case 348:return 267
break;
case 349:return 268
break;
case 350:return 269
break;
case 351:return 270
break;
case 352:return 271
break;
case 353:return 272
break;
case 354:return 273
break;
case 355:return 274
break;
case 356:return 275
break;
case 357:return 276
break;
case 358:return 277
break;
case 359:return 278
break;
case 360:return 279
break;
case 361:return 280
break;
case 362:return 281
break;
case 363:return 282
break;
case 364:return 283
break;
case 365:return 284
break;
case 366:return 285
break;
case 367:return 286
break;
case 368:return 287
break;
case 369:return 288
break;
case 370:return 289
break;
case 371:return 290
break;
case 372:return 291
break;
case 373:return 292
break;
case 374:return 293
break;
case 375:return 294
break;
case 376:return 295
break;
case 377:return 296
break;
case 378:return 297
break;
case 379:return 298
break;
case 380:return 299
break;
case 381:return 300
break;
case 382:return 301
break;
case 383:return 302
break;
case 384:return 303
break;
case 385:return 304
break;
case 386:return 305
break;
case 387:return 306
break;
case 388:return 307
break;
case 389:return 308
break;
case 390:return 309
break;
case 391:return 310
break;
case 392:return 311
break;
case 393:return 312
break;
case 394:return 313
break;
case 395:return 314
break;
case 396:return 315
break;
case 397:return 316
break;
case 398:return 317
break;
case 399:return 318
break;
case 400:return 319
break;
case 401:return 320
break;
case 402:return 321
break;
case 403:return 322
break;
case 404:return 323
break;
case 405:return 324
break;
case 406:return 325
break;
case 407:return 326
break;
case 408:return 327
break;
case 409:return 328
break;
case 410:return 329
break;
case 411:return 330
break;
case 412:return 331
break;
case 413:return 332
break;
case 414:return 333
break;
case 415:return 334
break;
case 416:return 335
break;
case 417:return 336
break;
case 418:return 337
break;
case 419:return 338
break;
case 420:return 339
break;
case 421:return 340
break;
case 422:return 341
break;
case 423:return 342
break;
case 424:return 343
break;
case 425:return 344
break;
case 426:return 345
break;
case 427:return 346
break;
case 428:return 347
break;
case 429:return 348
break;
case 430:return 349
break;
case 431:return 350
break;
case 432:return 351
break;
case 433:return 352
break;
case 434:return 353
break;
case 435:return 354
break;
case 436:return 355
break;
case 437:return 356
break;
case 438:return 357
break;
case 439:return 358
break;
case 440:return 359
break;
case 441:return 360
break;
case 442:return 361
break;
case 443:return 362
break;
case 444:return 363
break;
case 445:return 364
break;
case 446:return 365
break;
case 447:return 366
break;
case 448:return 367
break;
case 449:return 368
break;
case 450:return 369
break;
case 451:return 370
break;
case 452:return 29
break;
case 453:return 371
break;
case 454:return 372
break;
case 455:return 373
break;
case 456:return 374
break;
case 457:return 375
break;
case 458:return 376
break;
case 459:return 377
break;
case 460:return 378
break;
case 461:return 379
break;
case 462:return 380
break;
case 463:return 381
break;
case 464:return 382
break;
case 465:return 383
break;
case 466:return 384
break;
case 467:return 385
break;
case 468:return 386
break;
case 469:return 387
break;
case 470:return 388
break;
case 471:return 389
break;
case 472:return 390
break;
case 473:return 391
break;
case 474:return 392
break;
case 475:return 393
break;
case 476:return 394
break;
case 477:return 395
break;
case 478:return 396
break;
case 479:return 397
break;
case 480:return 398
break;
case 481:return 399
break;
case 482:return 400
break;
case 483:return 401
break;
case 484:return 402
break;
case 485:return 403
break;
case 486:return 404
break;
case 487:return 405
break;
case 488:return 406
break;
case 489:return 407
break;
case 490:return 408
break;
case 491:return 409
break;
case 492:return 410
break;
case 493:return 411
break;
case 494:return 412
break;
case 495:return 413
break;
case 496:return 414
break;
case 497:return 415
break;
case 498:return 416
break;
case 499:return 417
break;
case 500:return 418
break;
case 501:return 419
break;
case 502:return 420
break;
case 503:return 421
break;
case 504:return 422
break;
case 505:return 423
break;
case 506:return 424
break;
case 507:return 425
break;
case 508:return 426
break;
case 509:return 427
break;
case 510:return 428
break;
case 511:return 429
break;
case 512:return 430
break;
case 513:return 431
break;
case 514:return 432
break;
case 515:return 433
break;
case 516:return 434
break;
case 517:return 435
break;
case 518:return 436
break;
case 519:return 437
break;
case 520:return 438
break;
case 521:return 439
break;
case 522:return 440
break;
case 523:return 441
break;
case 524:return 442
break;
case 525:return 443
break;
case 526:return 444
break;
case 527:return 445
break;
case 528:return 446
break;
case 529:return 447
break;
case 530:return 448
break;
case 531:return 449
break;
case 532:return 450
break;
case 533:return 451
break;
case 534:return 452
break;
case 535:return 453
break;
case 536:return 454
break;
case 537:return 455
break;
case 538:return 456
break;
case 539:return 457
break;
case 540:return 458
break;
case 541:return 459
break;
case 542:return 460
break;
case 543:return 461
break;
case 544:return 462
break;
case 545:return 463
break;
case 546:return 464
break;
case 547:return 465
break;
case 548:return 466
break;
case 549:return 467
break;
case 550:return 468
break;
case 551:return 469
break;
case 552:return 470
break;
case 553:return 471
break;
case 554:return 472
break;
case 555:return 473
break;
case 556:return 474
break;
case 557:return 475
break;
case 558:return 476
break;
case 559:return 477
break;
case 560:return 478
break;
case 561:return 479
break;
case 562:return 480
break;
case 563:return 481
break;
case 564:return 482
break;
case 565:return 483
break;
case 566:return 484
break;
case 567:return 485
break;
case 568:return 486
break;
case 569:return 487
break;
case 570:return 488
break;
case 571:return 489
break;
case 572:return 490
break;
case 573:return 491
break;
case 574:return 492
break;
case 575:return 493
break;
case 576:return 494
break;
case 577:return 495
break;
case 578:return 496
break;
case 579:return 497
break;
case 580:return 498
break;
case 581:return 499
break;
case 582:return 500
break;
case 583:return 501
break;
case 584:return 502
break;
case 585:return 503
break;
case 586:return 504
break;
case 587:return 505
break;
case 588:return 506
break;
case 589:return 507
break;
case 590:return 508
break;
case 591:return 509
break;
case 592:return 510
break;
case 593:return 511
break;
case 594:return 512
break;
case 595:return 513
break;
case 596:return 514
break;
case 597:return 515
break;
case 598:return 516
break;
case 599:return 517
break;
case 600:return 518
break;
case 601:return 519
break;
case 602:return 520
break;
case 603:return 521
break;
case 604:return 522
break;
case 605:return 523
break;
case 606:return 524
break;
case 607:return 525
break;
case 608:return 526
break;
case 609:return 527
break;
case 610:return 528
break;
case 611:return 529
break;
case 612:return 530
break;
case 613:return 531
break;
case 614:return 532
break;
case 615:return 533
break;
case 616:return 534
break;
case 617:return 535
break;
case 618:return 536
break;
case 619:return 537
break;
case 620:return 538
break;
case 621:return 539
break;
case 622:return 540
break;
case 623:return 541
break;
case 624:return 542
break;
case 625:return 543
break;
case 626:return 544
break;
case 627:return 545
break;
case 628:return 546
break;
case 629:return 547
break;
case 630:return 548
break;
case 631:return 549
break;
case 632:return 550
break;
case 633:return 551
break;
case 634:return 552
break;
case 635:return 553
break;
case 636:return 554
break;
case 637:return 555
break;
case 638:return 556
break;
case 639:return 557
break;
case 640:return 558
break;
case 641:return 559
break;
case 642:return 560
break;
case 643:return 561
break;
case 644:return 562
break;
case 645:return 563
break;
case 646:return 564
break;
case 647:return 565
break;
case 648:return 566
break;
case 649:return 567
break;
case 650:return 568
break;
case 651:return 569
break;
case 652:return 570
break;
case 653:return 571
break;
case 654:return 572
break;
case 655:return 573
break;
case 656:return 36
break;
case 657:return 574
break;
case 658:return 575
break;
case 659:return 576
break;
case 660:return 577
break;
case 661:return 578
break;
case 662:return 579
break;
case 663:return 580
break;
case 664:return 581
break;
case 665:return 582
break;
case 666:return 583
break;
case 667:return 584
break;
case 668:return 585
break;
case 669:return 586
break;
case 670:return 587
break;
case 671:return 588
break;
case 672:return 589
break;
case 673:return 590
break;
case 674:return 591
break;
case 675:return 592
break;
case 676:return 593
break;
case 677:return 594
break;
case 678:return 595
break;
case 679:return 596
break;
case 680:return 597
break;
case 681:return 598
break;
case 682:return 599
break;
case 683:return 600
break;
case 684:return 601
break;
case 685:return 602
break;
case 686:return 603
break;
case 687:return 604
break;
case 688:return 605
break;
case 689:return 606
break;
case 690:return 607
break;
case 691:return 608
break;
case 692:return 609
break;
case 693:return 610
break;
case 694:return 611
break;
case 695:return 612
break;
case 696:return 613
break;
case 697:return 614
break;
case 698:return 615
break;
case 699:return 616
break;
case 700:return 617
break;
case 701:return 618
break;
case 702:return 619
break;
case 703:return 620
break;
case 704:return 621
break;
case 705:return 622
break;
case 706:return 623
break;
case 707:return 624
break;
case 708:return 40
break;
case 709:return 41
break;
case 710:return 597
break;
case 711:return 29
break;
case 712:return 29
break;
case 713:return 'TILDEs'
break;
case 714:return 685
break;
case 715:return 672
break;
case 716:return 347
break;
case 717:return 673
break;
case 718:return 674
break;
case 719:return 'REM'
break;
case 720:return 'RSHIFT'
break;
case 721:return 'LSHIFT'
break;
case 722:return 'NE'
break;
case 723:return 'NE'
break;
case 724:return 708
break;
case 725:return 707
break;
case 726:return 710
break;
case 727:return 709
break;
case 728:return 681
break;
case 729:return 'BITAND'
break;
case 730:return 'BITOR'
break;
case 731:return 656
break;
case 732:return 658
break;
case 733:return 645
break;
case 734:return 647
break;
case 735:return 635
break;
case 736:return 637
break;
case 737:return 24
break;
case 738:return 638
break;
case 739:return 650
break;
case 740:return 6
break;
case 741:return 'DOLLAR'
break;
case 742:return 'QUESTION'
break;
case 743:return 'CARET'
break;
case 744:return 21
break;
case 745:return 5
break;
case 746:return 'INVALID'
break;
}
},
rules: [/^(?:([`](\\.|[^"]|\\")*?[`])+)/i,/^(?:(['](\\.|[^']|\\')*?['])+)/i,/^(?:(["](\\.|[^"]|\\")*?["])+)/i,/^(?:--(.*?)($|\r\n|\r|\n))/i,/^(?:\s+)/i,/^(?:ABORT\b)/i,/^(?:ADD\b)/i,/^(?:AFTER\b)/i,/^(?:ALTER\b)/i,/^(?:ANALYZE\b)/i,/^(?:AND\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:ATTACH\b)/i,/^(?:BEFORE\b)/i,/^(?:BEGIN\b)/i,/^(?:BETWEEN\b)/i,/^(?:BY\b)/i,/^(?:CASCADE\b)/i,/^(?:CASE\b)/i,/^(?:CAST\b)/i,/^(?:CHECK\b)/i,/^(?:COLLATE\b)/i,/^(?:COLUMN\b)/i,/^(?:CONFLICT\b)/i,/^(?:CONSISTENT_READ\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:CREATE\b)/i,/^(?:CROSS\b)/i,/^(?:CURRENT_DATE\b)/i,/^(?:CURRENT_TIME\b)/i,/^(?:CURRENT_TIMESTAMP\b)/i,/^(?:DATABASE\b)/i,/^(?:DEFAULT\b)/i,/^(?:DEFERRABLE\b)/i,/^(?:DEFERRED\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DETACH\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:DESCRIBE\b)/i,/^(?:EACH\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:ESCAPE\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXCLUSIVE\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FAIL\b)/i,/^(?:FOR\b)/i,/^(?:FOREIGN\b)/i,/^(?:FROM\b)/i,/^(?:FULL\b)/i,/^(?:GLOB\b)/i,/^(?:GROUP\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:IGNORE\b)/i,/^(?:IMMEDIATE\b)/i,/^(?:IN\b)/i,/^(?:USE\b)/i,/^(?:INDEX\b)/i,/^(?:INDEXED\b)/i,/^(?:INITIALLY\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INSTEAD\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTO\b)/i,/^(?:IS\b)/i,/^(?:ISNULL\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:CONTAINS\b)/i,/^(?:LIMIT\b)/i,/^(?:MATCH\b)/i,/^(?:NATURAL\b)/i,/^(?:NO\b)/i,/^(?:NOT\b)/i,/^(?:NOTNULL\b)/i,/^(?:NULL\b)/i,/^(?:UNDEFINED\b)/i,/^(?:OF\b)/i,/^(?:OFFSET\b)/i,/^(?:ON\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:PLAN\b)/i,/^(?:PRAGMA\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:RAISE\b)/i,/^(?:RECURSIVE\b)/i,/^(?:REFERENCES\b)/i,/^(?:REGEXP\b)/i,/^(?:REINDEX\b)/i,/^(?:RELEASE\b)/i,/^(?:RENAME\b)/i,/^(?:REPLACE\b)/i,/^(?:RESTRICT\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLBACK\b)/i,/^(?:ROW\b)/i,/^(?:SELECT\b)/i,/^(?:SCAN\b)/i,/^(?:SET\b)/i,/^(?:TABLE\b)/i,/^(?:TEMP\b)/i,/^(?:THEN\b)/i,/^(?:TO\b)/i,/^(?:TRIGGER\b)/i,/^(?:UNION\b)/i,/^(?:UNIQUE\b)/i,/^(?:UPDATE\b)/i,/^(?:USING\b)/i,/^(?:VACUUM\b)/i,/^(?:VALUES\b)/i,/^(?:VIEW\b)/i,/^(?:WHEN\b)/i,/^(?:WHERE\b)/i,/^(?:WITH\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:SHOW\b)/i,/^(?:TABLES\b)/i,/^(?:STRING\b)/i,/^(?:NUMBER\b)/i,/^(?:STRINGSET\b)/i,/^(?:NUMBERSET\b)/i,/^(?:BINARYSET\b)/i,/^(?:THROUGHPUT\b)/i,/^(?:GSI\b)/i,/^(?:LSI\b)/i,/^(?:PROJECTION\b)/i,/^(?:ALL\b)/i,/^(?:KEYS_ONLY\b)/i,/^(?:NEW\b)/i,/^(?:DEBUG\b)/i,/^(?:ALLOCATE\b)/i,/^(?:ALTER\b)/i,/^(?:ANALYZE\b)/i,/^(?:AND\b)/i,/^(?:ANY\b)/i,/^(?:ARCHIVE\b)/i,/^(?:ARE\b)/i,/^(?:ARRAY\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:ASCII\b)/i,/^(?:ASENSITIVE\b)/i,/^(?:ASSERTION\b)/i,/^(?:ASYMMETRIC\b)/i,/^(?:AT\b)/i,/^(?:ATOMIC\b)/i,/^(?:ATTACH\b)/i,/^(?:ATTRIBUTE\b)/i,/^(?:AUTH\b)/i,/^(?:AUTHORIZATION\b)/i,/^(?:AUTHORIZE\b)/i,/^(?:AUTO\b)/i,/^(?:AVG\b)/i,/^(?:BACK\b)/i,/^(?:BACKUP\b)/i,/^(?:BASE\b)/i,/^(?:BATCH\b)/i,/^(?:BEFORE\b)/i,/^(?:BEGIN\b)/i,/^(?:BETWEEN\b)/i,/^(?:BIGINT\b)/i,/^(?:BINARY\b)/i,/^(?:BIT\b)/i,/^(?:BLOB\b)/i,/^(?:BLOCK\b)/i,/^(?:BOOLEAN\b)/i,/^(?:BOTH\b)/i,/^(?:BREADTH\b)/i,/^(?:BUCKET\b)/i,/^(?:BULK\b)/i,/^(?:BY\b)/i,/^(?:BYTE\b)/i,/^(?:CALL\b)/i,/^(?:CALLED\b)/i,/^(?:CALLING\b)/i,/^(?:CAPACITY\b)/i,/^(?:CASCADE\b)/i,/^(?:CASCADED\b)/i,/^(?:CASE\b)/i,/^(?:CAST\b)/i,/^(?:CATALOG\b)/i,/^(?:CHAR\b)/i,/^(?:CHARACTER\b)/i,/^(?:CHECK\b)/i,/^(?:CLASS\b)/i,/^(?:CLOB\b)/i,/^(?:CLOSE\b)/i,/^(?:CLUSTER\b)/i,/^(?:CLUSTERED\b)/i,/^(?:CLUSTERING\b)/i,/^(?:CLUSTERS\b)/i,/^(?:COALESCE\b)/i,/^(?:COLLATE\b)/i,/^(?:COLLATION\b)/i,/^(?:COLLECTION\b)/i,/^(?:COLUMN\b)/i,/^(?:COLUMNS\b)/i,/^(?:COMBINE\b)/i,/^(?:COMMENT\b)/i,/^(?:COMMIT\b)/i,/^(?:COMPACT\b)/i,/^(?:COMPILE\b)/i,/^(?:COMPRESS\b)/i,/^(?:CONDITION\b)/i,/^(?:CONFLICT\b)/i,/^(?:CONNECT\b)/i,/^(?:CONNECTION\b)/i,/^(?:CONSISTENCY\b)/i,/^(?:CONSISTENT\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:CONSTRAINTS\b)/i,/^(?:CONSTRUCTOR\b)/i,/^(?:CONSUMED\b)/i,/^(?:CONTINUE\b)/i,/^(?:CONVERT\b)/i,/^(?:COPY\b)/i,/^(?:CORRESPONDING\b)/i,/^(?:COUNT\b)/i,/^(?:COUNTER\b)/i,/^(?:CREATE\b)/i,/^(?:CROSS\b)/i,/^(?:CUBE\b)/i,/^(?:CURRENT\b)/i,/^(?:CURSOR\b)/i,/^(?:CYCLE\b)/i,/^(?:DATA\b)/i,/^(?:DATABASE\b)/i,/^(?:DATE\b)/i,/^(?:DATETIME\b)/i,/^(?:DAY\b)/i,/^(?:DEALLOCATE\b)/i,/^(?:DEC\b)/i,/^(?:DECIMAL\b)/i,/^(?:DECLARE\b)/i,/^(?:DEFAULT\b)/i,/^(?:DEFERRABLE\b)/i,/^(?:DEFERRED\b)/i,/^(?:DEFINE\b)/i,/^(?:DEFINED\b)/i,/^(?:DEFINITION\b)/i,/^(?:DELETE\b)/i,/^(?:DELIMITED\b)/i,/^(?:DEPTH\b)/i,/^(?:DEREF\b)/i,/^(?:DESC\b)/i,/^(?:DESCRIBE\b)/i,/^(?:DESCRIPTOR\b)/i,/^(?:DETACH\b)/i,/^(?:DETERMINISTIC\b)/i,/^(?:DIAGNOSTICS\b)/i,/^(?:DIRECTORIES\b)/i,/^(?:DISABLE\b)/i,/^(?:DISCONNECT\b)/i,/^(?:DISTINCT\b)/i,/^(?:DISTRIBUTE\b)/i,/^(?:DO\b)/i,/^(?:DOMAIN\b)/i,/^(?:DOUBLE\b)/i,/^(?:DROP\b)/i,/^(?:DUMP\b)/i,/^(?:DURATION\b)/i,/^(?:DYNAMIC\b)/i,/^(?:EACH\b)/i,/^(?:ELEMENT\b)/i,/^(?:ELSE\b)/i,/^(?:ELSEIF\b)/i,/^(?:EMPTY\b)/i,/^(?:ENABLE\b)/i,/^(?:END\b)/i,/^(?:EQUAL\b)/i,/^(?:EQUALS\b)/i,/^(?:ERROR\b)/i,/^(?:ESCAPE\b)/i,/^(?:ESCAPED\b)/i,/^(?:EVAL\b)/i,/^(?:EVALUATE\b)/i,/^(?:EXCEEDED\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXCEPTION\b)/i,/^(?:EXCEPTIONS\b)/i,/^(?:EXCLUSIVE\b)/i,/^(?:EXEC\b)/i,/^(?:EXECUTE\b)/i,/^(?:EXISTS\b)/i,/^(?:EXIT\b)/i,/^(?:EXPLAIN\b)/i,/^(?:EXPLODE\b)/i,/^(?:EXPORT\b)/i,/^(?:EXPRESSION\b)/i,/^(?:EXTENDED\b)/i,/^(?:EXTERNAL\b)/i,/^(?:EXTRACT\b)/i,/^(?:FAIL\b)/i,/^(?:FALSE\b)/i,/^(?:FAMILY\b)/i,/^(?:FETCH\b)/i,/^(?:FIELDS\b)/i,/^(?:FILE\b)/i,/^(?:FILTER\b)/i,/^(?:FILTERING\b)/i,/^(?:FINAL\b)/i,/^(?:FINISH\b)/i,/^(?:FIRST\b)/i,/^(?:FIXED\b)/i,/^(?:FLATTERN\b)/i,/^(?:FLOAT\b)/i,/^(?:FOR\b)/i,/^(?:FORCE\b)/i,/^(?:FOREIGN\b)/i,/^(?:FORMAT\b)/i,/^(?:FORWARD\b)/i,/^(?:FOUND\b)/i,/^(?:FREE\b)/i,/^(?:FROM\b)/i,/^(?:FULL\b)/i,/^(?:FUNCTION\b)/i,/^(?:FUNCTIONS\b)/i,/^(?:GENERAL\b)/i,/^(?:GENERATE\b)/i,/^(?:GET\b)/i,/^(?:GLOB\b)/i,/^(?:GLOBAL\b)/i,/^(?:GO\b)/i,/^(?:GOTO\b)/i,/^(?:GRANT\b)/i,/^(?:GREATER\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HANDLER\b)/i,/^(?:HASH\b)/i,/^(?:HAVE\b)/i,/^(?:HAVING\b)/i,/^(?:HEAP\b)/i,/^(?:HIDDEN\b)/i,/^(?:HOLD\b)/i,/^(?:HOUR\b)/i,/^(?:IDENTIFIED\b)/i,/^(?:IDENTITY\b)/i,/^(?:IF\b)/i,/^(?:IGNORE\b)/i,/^(?:IMMEDIATE\b)/i,/^(?:IMPORT\b)/i,/^(?:IN\b)/i,/^(?:INCLUDING\b)/i,/^(?:INCLUSIVE\b)/i,/^(?:INCREMENT\b)/i,/^(?:INCREMENTAL\b)/i,/^(?:INDEX\b)/i,/^(?:INDEXED\b)/i,/^(?:INDEXES\b)/i,/^(?:INDICATOR\b)/i,/^(?:INFINITE\b)/i,/^(?:INITIALLY\b)/i,/^(?:INLINE\b)/i,/^(?:INNER\b)/i,/^(?:INNTER\b)/i,/^(?:INOUT\b)/i,/^(?:INPUT\b)/i,/^(?:INSENSITIVE\b)/i,/^(?:INSERT\b)/i,/^(?:INSTEAD\b)/i,/^(?:INT\b)/i,/^(?:INTEGER\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTERVAL\b)/i,/^(?:INTO\b)/i,/^(?:INVALIDATE\b)/i,/^(?:IS\b)/i,/^(?:ISOLATION\b)/i,/^(?:ITEM\b)/i,/^(?:ITEMS\b)/i,/^(?:ITERATE\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:KEYS\b)/i,/^(?:LAG\b)/i,/^(?:LANGUAGE\b)/i,/^(?:LARGE\b)/i,/^(?:LAST\b)/i,/^(?:LATERAL\b)/i,/^(?:LEAD\b)/i,/^(?:LEADING\b)/i,/^(?:LEAVE\b)/i,/^(?:LEFT\b)/i,/^(?:LENGTH\b)/i,/^(?:LESS\b)/i,/^(?:LEVEL\b)/i,/^(?:LIKE\b)/i,/^(?:LIMIT\b)/i,/^(?:LIMITED\b)/i,/^(?:LINES\b)/i,/^(?:LIST\b)/i,/^(?:LOAD\b)/i,/^(?:LOCAL\b)/i,/^(?:LOCALTIME\b)/i,/^(?:LOCALTIMESTAMP\b)/i,/^(?:LOCATION\b)/i,/^(?:LOCATOR\b)/i,/^(?:LOCK\b)/i,/^(?:LOCKS\b)/i,/^(?:LOG\b)/i,/^(?:LOGED\b)/i,/^(?:LONG\b)/i,/^(?:LOOP\b)/i,/^(?:LOWER\b)/i,/^(?:MAP\b)/i,/^(?:MATCH\b)/i,/^(?:MATERIALIZED\b)/i,/^(?:MAX\b)/i,/^(?:MAXLEN\b)/i,/^(?:MEMBER\b)/i,/^(?:MERGE\b)/i,/^(?:METHOD\b)/i,/^(?:METRICS\b)/i,/^(?:MIN\b)/i,/^(?:MINUS\b)/i,/^(?:MINUTE\b)/i,/^(?:MISSING\b)/i,/^(?:MOD\b)/i,/^(?:MODE\b)/i,/^(?:MODIFIES\b)/i,/^(?:MODIFY\b)/i,/^(?:MODULE\b)/i,/^(?:MONTH\b)/i,/^(?:MULTI\b)/i,/^(?:MULTISET\b)/i,/^(?:NAME\b)/i,/^(?:NAMES\b)/i,/^(?:NATIONAL\b)/i,/^(?:NATURAL\b)/i,/^(?:NCHAR\b)/i,/^(?:NCLOB\b)/i,/^(?:NEW\b)/i,/^(?:NEXT\b)/i,/^(?:NO\b)/i,/^(?:NONE\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:NULLIF\b)/i,/^(?:NUMBER\b)/i,/^(?:NUMERIC\b)/i,/^(?:OBJECT\b)/i,/^(?:OF\b)/i,/^(?:OFFLINE\b)/i,/^(?:OFFSET\b)/i,/^(?:OLD\b)/i,/^(?:ON\b)/i,/^(?:ONLINE\b)/i,/^(?:ONLY\b)/i,/^(?:OPAQUE\b)/i,/^(?:OPEN\b)/i,/^(?:OPERATOR\b)/i,/^(?:OPTION\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:ORDINALITY\b)/i,/^(?:OTHER\b)/i,/^(?:OTHERS\b)/i,/^(?:OUT\b)/i,/^(?:OUTER\b)/i,/^(?:OUTPUT\b)/i,/^(?:OVER\b)/i,/^(?:OVERLAPS\b)/i,/^(?:OVERRIDE\b)/i,/^(?:OWNER\b)/i,/^(?:PAD\b)/i,/^(?:PARALLEL\b)/i,/^(?:PARAMETER\b)/i,/^(?:PARAMETERS\b)/i,/^(?:PARTIAL\b)/i,/^(?:PARTITION\b)/i,/^(?:PARTITIONED\b)/i,/^(?:PARTITIONS\b)/i,/^(?:PATH\b)/i,/^(?:PERCENT\b)/i,/^(?:PERCENTILE\b)/i,/^(?:PERMISSION\b)/i,/^(?:PERMISSIONS\b)/i,/^(?:PIPE\b)/i,/^(?:PIPELINED\b)/i,/^(?:PLAN\b)/i,/^(?:POOL\b)/i,/^(?:POSITION\b)/i,/^(?:PRECISION\b)/i,/^(?:PREPARE\b)/i,/^(?:PRESERVE\b)/i,/^(?:PRIMARY\b)/i,/^(?:PRIOR\b)/i,/^(?:PRIVATE\b)/i,/^(?:PRIVILEGES\b)/i,/^(?:PROCEDURE\b)/i,/^(?:PROCESSED\b)/i,/^(?:PROJECT\b)/i,/^(?:PROJECTION\b)/i,/^(?:PROPERTY\b)/i,/^(?:PROVISIONING\b)/i,/^(?:PUBLIC\b)/i,/^(?:PUT\b)/i,/^(?:QUERY\b)/i,/^(?:QUIT\b)/i,/^(?:QUORUM\b)/i,/^(?:RAISE\b)/i,/^(?:RANDOM\b)/i,/^(?:RANGE\b)/i,/^(?:RANK\b)/i,/^(?:RAW\b)/i,/^(?:READ\b)/i,/^(?:READS\b)/i,/^(?:REAL\b)/i,/^(?:REBUILD\b)/i,/^(?:RECORD\b)/i,/^(?:RECURSIVE\b)/i,/^(?:REDUCE\b)/i,/^(?:REF\b)/i,/^(?:REFERENCE\b)/i,/^(?:REFERENCES\b)/i,/^(?:REFERENCING\b)/i,/^(?:REGEXP\b)/i,/^(?:REGION\b)/i,/^(?:REINDEX\b)/i,/^(?:RELATIVE\b)/i,/^(?:RELEASE\b)/i,/^(?:REMAINDER\b)/i,/^(?:RENAME\b)/i,/^(?:REPEAT\b)/i,/^(?:REPLACE\b)/i,/^(?:REQUEST\b)/i,/^(?:RESET\b)/i,/^(?:RESIGNAL\b)/i,/^(?:RESOURCE\b)/i,/^(?:RESPONSE\b)/i,/^(?:RESTORE\b)/i,/^(?:RESTRICT\b)/i,/^(?:RESULT\b)/i,/^(?:RETURN\b)/i,/^(?:RETURNING\b)/i,/^(?:RETURNS\b)/i,/^(?:REVERSE\b)/i,/^(?:REVOKE\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLE\b)/i,/^(?:ROLES\b)/i,/^(?:ROLLBACK\b)/i,/^(?:ROLLUP\b)/i,/^(?:ROUTINE\b)/i,/^(?:ROW\b)/i,/^(?:ROWS\b)/i,/^(?:RULE\b)/i,/^(?:RULES\b)/i,/^(?:SAMPLE\b)/i,/^(?:SATISFIES\b)/i,/^(?:SAVE\b)/i,/^(?:SAVEPOINT\b)/i,/^(?:SCAN\b)/i,/^(?:SCHEMA\b)/i,/^(?:SCOPE\b)/i,/^(?:SCROLL\b)/i,/^(?:SEARCH\b)/i,/^(?:SECOND\b)/i,/^(?:SECTION\b)/i,/^(?:SEGMENT\b)/i,/^(?:SEGMENTS\b)/i,/^(?:SELECT\b)/i,/^(?:SELF\b)/i,/^(?:SEMI\b)/i,/^(?:SENSITIVE\b)/i,/^(?:SEPARATE\b)/i,/^(?:SEQUENCE\b)/i,/^(?:SERIALIZABLE\b)/i,/^(?:SESSION\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SHARD\b)/i,/^(?:SHARE\b)/i,/^(?:SHARED\b)/i,/^(?:SHORT\b)/i,/^(?:SHOW\b)/i,/^(?:SIGNAL\b)/i,/^(?:SIMILAR\b)/i,/^(?:SIZE\b)/i,/^(?:SKEWED\b)/i,/^(?:SMALLINT\b)/i,/^(?:SNAPSHOT\b)/i,/^(?:SOME\b)/i,/^(?:SOURCE\b)/i,/^(?:SPACE\b)/i,/^(?:SPACES\b)/i,/^(?:SPARSE\b)/i,/^(?:SPECIFIC\b)/i,/^(?:SPECIFICTYPE\b)/i,/^(?:SPLIT\b)/i,/^(?:SQL\b)/i,/^(?:SQLCODE\b)/i,/^(?:SQLERROR\b)/i,/^(?:SQLEXCEPTION\b)/i,/^(?:SQLSTATE\b)/i,/^(?:SQLWARNING\b)/i,/^(?:START\b)/i,/^(?:STATE\b)/i,/^(?:STATIC\b)/i,/^(?:STATUS\b)/i,/^(?:STORAGE\b)/i,/^(?:STORE\b)/i,/^(?:STORED\b)/i,/^(?:STREAM\b)/i,/^(?:STRING\b)/i,/^(?:STRUCT\b)/i,/^(?:STYLE\b)/i,/^(?:SUB\b)/i,/^(?:SUBMULTISET\b)/i,/^(?:SUBPARTITION\b)/i,/^(?:SUBSTRING\b)/i,/^(?:SUBTYPE\b)/i,/^(?:SUM\b)/i,/^(?:SUPER\b)/i,/^(?:SYMMETRIC\b)/i,/^(?:SYNONYM\b)/i,/^(?:SYSTEM\b)/i,/^(?:TABLE\b)/i,/^(?:TABLESAMPLE\b)/i,/^(?:TEMP\b)/i,/^(?:TEMPORARY\b)/i,/^(?:TERMINATED\b)/i,/^(?:TEXT\b)/i,/^(?:THAN\b)/i,/^(?:THEN\b)/i,/^(?:THROUGHPUT\b)/i,/^(?:TIME\b)/i,/^(?:TIMESTAMP\b)/i,/^(?:TIMEZONE\b)/i,/^(?:TINYINT\b)/i,/^(?:TO\b)/i,/^(?:TOKEN\b)/i,/^(?:TOTAL\b)/i,/^(?:TOUCH\b)/i,/^(?:TRAILING\b)/i,/^(?:TRANSACTION\b)/i,/^(?:TRANSFORM\b)/i,/^(?:TRANSLATE\b)/i,/^(?:TRANSLATION\b)/i,/^(?:TREAT\b)/i,/^(?:TRIGGER\b)/i,/^(?:TRIM\b)/i,/^(?:TRUE\b)/i,/^(?:TRUNCATE\b)/i,/^(?:TTL\b)/i,/^(?:TUPLE\b)/i,/^(?:TYPE\b)/i,/^(?:UNDER\b)/i,/^(?:UNDO\b)/i,/^(?:UNION\b)/i,/^(?:UNIQUE\b)/i,/^(?:UNIT\b)/i,/^(?:UNKNOWN\b)/i,/^(?:UNLOGGED\b)/i,/^(?:UNNEST\b)/i,/^(?:UNPROCESSED\b)/i,/^(?:UNSIGNED\b)/i,/^(?:UNTIL\b)/i,/^(?:UPDATE\b)/i,/^(?:UPPER\b)/i,/^(?:URL\b)/i,/^(?:USAGE\b)/i,/^(?:USE\b)/i,/^(?:USER\b)/i,/^(?:USERS\b)/i,/^(?:USING\b)/i,/^(?:UUID\b)/i,/^(?:VACUUM\b)/i,/^(?:VALUE\b)/i,/^(?:VALUED\b)/i,/^(?:VALUES\b)/i,/^(?:VARCHAR\b)/i,/^(?:VARIABLE\b)/i,/^(?:VARIANCE\b)/i,/^(?:VARINT\b)/i,/^(?:VARYING\b)/i,/^(?:VIEW\b)/i,/^(?:VIEWS\b)/i,/^(?:VIRTUAL\b)/i,/^(?:VOID\b)/i,/^(?:WAIT\b)/i,/^(?:WHEN\b)/i,/^(?:WHENEVER\b)/i,/^(?:WHERE\b)/i,/^(?:WHILE\b)/i,/^(?:WINDOW\b)/i,/^(?:WITH\b)/i,/^(?:WITHIN\b)/i,/^(?:WITHOUT\b)/i,/^(?:WORK\b)/i,/^(?:WRAPPED\b)/i,/^(?:WRITE\b)/i,/^(?:YEAR\b)/i,/^(?:ZONE\b)/i,/^(?:JSON\b)/i,/^(?:MATH\b)/i,/^(?:UUID\b)/i,/^(?:[-]?(\d*[.])?\d+[eE]\d+)/i,/^(?:[-]?(\d*[.])?\d+)/i,/^(?:~)/i,/^(?:\+=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:<>)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:=)/i,/^(?:&)/i,/^(?:\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:\^)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = sqlparser;
exports.Parser = sqlparser.Parser;
exports.parse = function () { return sqlparser.parse.apply(sqlparser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}